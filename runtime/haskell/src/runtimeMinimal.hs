import Data.Char

-- Abstract Syntax
data Expression = App Expression Expression | U deriving Eq
instance Show Expression where
  show (App U U) = "i"
  show (App U (App U (App U U))) = "k"
  show (App U (App U (App U (App U U)))) = "s"
  show (App f a)   = "(" ++ show f ++ " " ++ show a ++ ")"
  show U           = "u"

-- Semantics
valueOf :: Expression -> Expression
valueOf x = maybe x valueOf $ reduce x

spl :: [t] -> Maybe (t, [t])
spl []     = Nothing
spl (x:xs) = Just (x,xs)

unr :: [Expression] -> Expression -> Expression
unr es e = foldl App e es

_s = App U (App U (App U (App U U)))
_k = App U (App U (App U U))

reduceInternal :: Expression -> [Expression] -> Maybe Expression
reduceInternal e l | e == _s = spl l >>= \(a,l) -> 
                               spl l >>= \(b,l) -> 
                               spl l >>= \(c,l) ->
                               Just $ unr l $ App (App a c) (App b c)
                   | e == _k = spl l >>= \(a,l) -> 
                               spl l >>= \(b,l) -> 
                               Just $ unr l $ a
                   | e == U  = spl l >>= \(a,l) -> 
                               Just $ unr l $ App (App a _s) _k
                   | App a b <- e = reduceInternal a (b : l)
                   | otherwise    = Nothing

reduce :: Expression -> Maybe Expression
reduce e = reduceInternal e []

isNF :: Expression -> Bool
isNF x = x == valueOf x

-- Environment

type Env = [(String, Expression)]

envInitial :: Env
envInitial = [("u", U)]

envAdd :: String -> Expression -> Env -> Env
envAdd name value []           = [(name, value)]
envAdd name value ((a, b):env) = if a == name then ((a, value):env) else (a, b):envAdd name value env

envGet :: String -> Env -> Expression
envGet name []           = error $ "no definition for " ++ name ++ " found"
envGet name ((a, b):env) = if a == name then b else envGet name env

envParse :: String -> Env -> Env
envParse s env = envParseBag [] Nothing Nothing s env

envParseBag :: [Expression] -> Maybe String -> Maybe String -> String -> Env -> Env
envParseBag []      Nothing  _        []           env = env
envParseBag _       _        _        []           env = error "unexpected end of input"
envParseBag stack   name     Nothing  (' '  : s)   env = envParseBag stack name Nothing s env
envParseBag []      _        Nothing  ('.'  : s)   env = error "unexpected application (stack was empty)"
envParseBag [e]     (Just n) Nothing  ('.'  : s)   env = envParseBag [] Nothing Nothing s (envAdd n e env)
envParseBag (b:a:e) name     Nothing  ('.'  : s)   env = envParseBag (App a b : e) name Nothing s env
 
envParseBag stack   Nothing  (Just x) t@(' '  : s) env = envParseBag stack (Just x) Nothing t env
envParseBag stack   Nothing  (Just x) t@('.'  : s) env = envParseBag stack (Just x) Nothing t env 

envParseBag stack   name     (Just x) t@(' '  : s) env = envParseBag (envGet x env : stack) name Nothing t env
envParseBag stack   name     (Just x) t@('.'  : s) env = envParseBag (envGet x env : stack) name Nothing t env 

envParseBag stack   name     Nothing  t@(c : s)    env = envParseBag stack name (Just "") t env
envParseBag stack   name     (Just x) (c : s)      env = envParseBag stack name (Just (x ++ [c])) s env

envCreate :: String -> Env
envCreate s = envParse s envInitial

prelude = envCreate "i u u..k u u i...s u k..b s k s..k..c s s k s..s k k..s...k k...m s i.i..y b m.c b.s i.i....i i.k k.s s.b b.c c.m s i.i..y b m.c b.s i.i....True k.True_Dispatch b c.c i...False k i..False_Dispatch c b c.c i....if i.not c c i.False..True..lAnd c c.False..lOr c i.True..implies c c.True..xor c b s.c b b.if..not...i..eq b b not..xor..Zero k.Zero_Dispatch c b b.b c.c i....k..Succ b k.c i...Succ_Dispatch c b c.c i....one Succ Zero..two Succ one..three Succ two..pred c c i.Zero..i..isZero c c i.True..k False...add y b s b c.c i....c b.Succ....sub y b s b c.c i....c b.pred....mul y b b c c i.Zero....s b b.add.....pow y b b c c i.one....s b b.mul....._qadd c b b.add..mul Succ three....isEQ s b s.b b lAnd..b b isZero..sub....b b isZero..c sub....isLTE b b isZero..sub..isGTE c isLTE..isLT b b not..isGTE..isGT b b not..isLTE..min c b s.s b c.b b if..isLT...i...i..max c b s.s b c.b b if..isGT...i...i..diff s b s.s b s.b b if..isLT...c sub....sub..mod y b s b s.s b c.b b if..isLT...i....c b c.b b s..c b b.b..sub....i....div y b s b s.c b c.b b if..isLT...Zero....b b b Succ...c b c.b b s..c b b.b..sub....i.....Pair b c.c i...Pair_Dispatch b k.c i...fst c i.k..snd c i.k i...changeFst c b.b Pair...changeSnd c b.c b b.Pair....ListEmpty k.ListEmpty_Dispatch c b b.b c.c i....b k.k...ListCons b b k..b c.c i....ListCons_Dispatch c b c.c i....listIsEmpty c c i.True..k k False....listIsNotEmpty b not.listIsEmpty..head c c i.i..k..tail c c i.i..k i...foldl y b c b s.b b....c b c.b b s..b b b c...b b b b c....c b b.b b.b b.c....c i.......i....foldr y b c b s.b b....b b b c...b b s b...b b c..c......reverseBag y b c s..c b b.b b.c...c ListCons.....reverse c reverseBag.ListEmpty..unfold y b s b b.ListCons...c b c.b b s..c b b.b..c i.....i....repeat c unfold.i..listConcat y b c s..b b c b b.ListCons....c....listReturn c ListCons.ListEmpty..listAddBack c b b.listConcat..c ListCons.ListEmpty...cfold y b b s b b.ListCons....b c b b.b b.c i.ListEmpty.....c b c.b b s..b b b c...b b b b c....c b b.b b.b b.c....c i.......i.....take y b b c c i.ListEmpty....b c b b.b b.c i.ListEmpty.....b c b b.b b.ListCons....c.....takeWhile y b b c c i.ListEmpty....b s b s.b b b..c b c.b b if..b not....ListEmpty.....b c b b.ListCons.......listBind b c c foldl.ListEmpty...c b b.listConcat....map y b b c c i.ListEmpty....s b c.b b b..b ListCons.......filter y b b c c i.ListEmpty....s b c.b b b..c b c.c b s.b if...ListCons...i.......drop y b b s c i.ListEmpty....b b b k...b c b c.b b....c.....dropWhile y b b s c i.ListEmpty....s b c.b b c..b b b b...b c.b b if..b not..........any b b not..b b listIsEmpty..filter...all b b not..b any.b not....or any i..and all i..length c c foldl.Zero..b k.Succ...zipWith y b b c b b.c i.ListEmpty.....b b c b b.b b.c i.ListEmpty......s b c.b b b..b b c..b b b b...b b ListCons...........zip zipWith Pair..listZipLonger y b s b s.b b s..b b b s...c b b.b b.b...c b c.b b map..c i..........b c b c.b b s..b b b s...b b b b b....b b b b b....b c b b.b...c b c.b b map..c c............b b s b c.b b b..b b c..b b b b...b b ListCons.........b b c..b b b c...b c.b c.........listEquals b s b s.b b lAnd..c b b.b isEQ.length...length.....b b b and...zipWith...listMerge y b b s s...b b s b s.b b b..b b b..c i.......b b b b b b b k.......s b s.b b s..b b b c...b b b b c....b b b b b c.....b b b b b b s......b b c b b.b s.b b b..b b c..b b if.........b b b c b b.ListCons.....b c..........b b s ListCons.........listSort y c b c.b b s..b b s b if.c b isGT.length..one.....c b c.b b s..s b s.b b s..b b b s...b s b b.b b.listMerge....c b c.b b b..b b....c take.......c b c.b b b..b b....c drop......c b div.length..two......i...intSort listSort isLT..listElementAt b b head..c drop...listStartsWith c b c.b b s..c b b.b b.listEquals...c b take.length......i..listJoin c b b.c i.ListEmpty...b c b c.c foldl....b b listConcat..c listConcat.....strIsEmpty i listIsEmpty..strIsNotEmpty i b.not.strIsEmpty..strEmpty i ListEmpty..strCons i listConcat..strStartsWith i listStartsWith.isEQ..strJoin c b b.c i.ListEmpty...b c b c.c foldl....b b strCons..c strCons.....strConss c c i.ListEmpty..c b c.c foldl...strCons...strEquals listEquals isEQ..Just b b k..c i...Just_Dispatch b c.c i...Nothing k i..Nothing_Dispatch c b c.b c i..k....maybeReturn Just.maybeNothing Nothing.maybeHasValue Just_Dispatch k True..False..maybeGetValue Just_Dispatch i.i..maybeBind c c.Nothing..maybeMap c b c.c b.b Just....Nothing..maybeAlternative s i.k..maybeTryGetValue c i.i.._listIndexOfPred y b c b b.b b.c i.Nothing.....b s b s.b b c..b b b b...c b b.b c.b if....Just......c b c.b b b..b b c..c....Succ.....listIndexOfPred c b c._listIndexOfPred..Zero..listIndexOf b b.listIndexOfPred.._4 Succ three.._16 mul _4._4.._32 mul two._16.._48 mul three._16.._10 add two.add _4._4...xstrFromNat y b s b s.c b if.isZero.....c b c.b b s..c b b.b..c b ListCons.b add _48..c mod._10........c div._10.....strFromN s c b if.isZero..ListCons _48.ListEmpty...xstrFromNat strEmpty...strFromNs listBind c b strCons.strFromN..ListCons _32.ListEmpty....strToN c c foldl.Zero..c b b.b add.c mul._10....c sub._48....strFromB c c if.ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListEmpty......ListCons _qadd two._qadd one._qadd Zero.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListEmpty.......strFromS b strConss.b ListCons ListCons _qadd Zero._qadd Zero._qadd two.one....ListEmpty...c ListCons.ListCons ListCons _qadd Zero._qadd Zero._qadd two.one....ListEmpty..ListEmpty.....strFromPair b b b strConss...b b b ListCons ListCons _qadd Zero._qadd two.two...ListEmpty.....c b b.b s.b b ListCons..c b.fst.....b b ListCons ListCons _qadd Zero._qadd Zero.two...ListCons _qadd three._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListEmpty......c b c.b b ListCons..c b.snd....ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.......LabeledVertex b c.c i...LabeledVertex_Dispatch b k.c i...LabeledBinLeaf b b k..c i...LabeledBinLeaf_Dispatch c b b.b c.c i....b k.b k.k....LabeledBinVertex b b b k...b b c..b c.c i.....LabeledBinVertex_Dispatch c b c.b c i..k....LabeledOrderedBinLeaf b b k..c i...LabeledOrderedBinLeaf_Dispatch c b b.b c.c i....b k.b k.b k.k.....LabeledOrderedBinVertex b b b b k....b b b c...b b c..b c.c i......LabeledOrderedBinVertex_Dispatch c b c.b c i..k....RBTreeLeaf b k.k..RBTreeLeaf_Dispatch c b s.b b c..c b b.b c.c i....b k.b k.b k.k.......b k.b k.b k.k.....RBTreeNodeRed b b b b k....b b b b b k.....b b b c...b b c..b c.c i.......RBTreeNodeRed_Dispatch c b s.b b c..c b c.c i......b k.b k.b k.k.....RBTreeNodeBlack b b b b k....b b b b k....b b b c...b b c..b c.c i.......RBTreeNodeBlack_Dispatch c b c.s b c.c i...b k.b k.b k.k.......nats0 unfold Zero.Succ..nats unfold one.Succ..zeroes repeat Zero..byteVals take _qadd Zero._qadd Zero._qadd Zero._qadd Zero.one.....nats0..toBinSeq b map c mod.two...b takeWhile b not.isZero...c unfold.c div.two.....fromBinSeq c c b foldl.c zipWith c b b.mul..pow two....nats0...Zero..add..nxor b b fromBinSeq..c b c.c b c.c b b.b listZipLonger.toBinSeq...toBinSeq...Zero...c b c.b b mod..add...two....isUpperCaseLetter s b lAnd.c isGT._qadd Zero._qadd Zero._qadd Zero.one......c isLT._qadd three._qadd two._qadd one.one......isLowerCaseLetter s b lOr.s b lAnd.c isGT._qadd Zero._qadd Zero._qadd two.one......c isLT._qadd three._qadd two._qadd three.one.......c isEQ._qadd three._qadd three._qadd one.one......isAlpha s b lOr.isUpperCaseLetter..isLowerCaseLetter..alpha filter isAlpha.byteVals..isNum s b lAnd.c isGT._qadd three._qadd three.two.....c isLT._qadd two._qadd two.three.....num filter isNum.byteVals..isAlphaNum s b lOr.isAlpha..isNum..isWhiteSpace c isLT._qadd two._qadd Zero.two....whiteSpace filter isWhiteSpace.byteVals..newLine ListCons _qadd one.three..ListCons _qadd two.two..ListEmpty...toUpperCaseLetter s s b if.isLowerCaseLetter..c add._qadd Zero._qadd Zero.two.....i..toLowerCaseLetter s s b if.isUpperCaseLetter..c sub._qadd Zero._qadd Zero.two.....i..toUpperCaseString map toUpperCaseLetter..toLowerCaseString map toLowerCaseLetter..halt y c b s.c b c.c if...i...i...fak c c b foldl.c take.nats...one..mul.._nextCandids b filter.b b not..b b isZero..c mod....._primes y c b s.b b s ListCons...c b b.b..c _nextCandids.....head...primes _primes tail nats...fibs y b ListCons one..b ListCons one..s zipWith add..tail.....listCutAt y b s b b.s i.Pair ListEmpty.....b c b s.b b s..b b b b...b c b c.b if....Pair ListEmpty.......c b c.b b b..b b c..b b b changeFst...c.....ListCons.....strFromSS c c foldl.strEmpty..c b b.strCons..c strCons.ListCons _qadd two.two..ListEmpty.....xlistSplitAt c b b.b unfold.c listCutAt.k True.....c b c.b b changeSnd..c b listCutAt.snd.....tail...listSplitAt b b listBind c b ListCons.snd..ListEmpty....c b c.b b listCutAt..b b tail..xlistSplitAt....b listIsEmpty.snd....listContains c b c.b b any..c i.....strContains c b c.listContains..isEQ..listRepeat b b listBind i...c b b.take..repeat...strBurst map c ListCons.ListEmpty...strTrim b reverse.b dropWhile isWhiteSpace..b reverse.dropWhile isWhiteSpace.....strFromMaybe c b c.b c i..b strCons ListCons _qadd two._qadd two._qadd Zero.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd Zero._qadd Zero.two...ListEmpty..........ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd Zero._qadd two._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd three._qadd one._qadd two.one....ListEmpty.........ParseResultFail k.ParseResultFail_Dispatch c b b.b c.c i....b k.k...ParseResult b b k..b c.c i....ParseResult_Dispatch c b c.c i....parseReturn c ParseResult..parseFail k ParseResultFail..parseOperation b c c i.ParseResultFail...c b b.ParseResult....parseBindOperation c b b.parseOperation...parsePipe c b b.b c.c c.ParseResultFail....c..parseBind b c b b.b c.c c.ParseResultFail.....b b.b c.b parseOperation.....parseBindDiscard parseBind k..parseBindOverride parseBind k i...parseBindPair parseBind Pair..parseCharIf c b s.c b s.b b if..b s b lAnd.b not.listIsEmpty....c b.head.....s b parseReturn.head..tail....parseFail..parseCharIf b s s i.parseFail...c b b.b c.b b c..c b s.b b b..b if....parseReturn.....parseFail...parseCharX b parseCharIf.c b c.listContains..isEQ...parseChar b parseCharIf.isEQ..parseSingle parseCharIf k True...parseString c c b foldl.map parseChar...parseReturn strEmpty...parseBind listAddBack...parseUntil b b s b parseReturn.fst..snd...c listCutAt...parseWhile b parseUntil.b not...parseWhileMinOne b s c b s.b c b if.b listIsEmpty.ParseResult_Dispatch k i..ListEmpty.....parseFail...i...parseWhile..parseOption c b c.b b c..s...ParseResult..parseOptions y b c b b.c i.ParseResultFail....c b c.b b c..b b b c...b s b c.b b b..c i.....c.....ParseResult....parseWhitespace parseWhile isWhiteSpace..parseWithWhitespace c b parseBindDiscard.parseBindOverride parseWhitespace...parseWhitespace..parseToken parseBind ListCons.parseCharIf isAlpha..parseWhile isAlphaNum...parsenumber parseBindOperation parseWhileMinOne isNum..strToN..parseAccept b c c i.Nothing...c b c.b b c..c b c.b b b..b if....Just....Nothing...parseAcceptAll parseAccept k True...parseAcceptFullyConsumed parseAccept listIsEmpty..parseWhilesuccessful y b s b c.c s.c ParseResult.ListEmpty.....c b c.b b c..b b b b...c b c.b c...ParseResultFail.....b c b b.ParseResult...ListCons.....mapCreate c Pair.ListEmpty..mapGetAll s b c.b b filter..c b c.b b b..fst...fst....snd..mapHasKey b b any k True....mapGetAll..mapCount b length.snd..mapadd c b b.b b.changeSnd...b b ListCons..Pair...mapRemove s b b.changeSnd..b b filter..b b b not...c b c.b b b..fst...fst.....mapSet c b s.b b mapadd..mapRemove...i..mapGet b b snd..b b head..mapGetAll...idfCreate mapCreate.idfHandle s b s.s b s.b b if..mapHasKey...s b b.Pair..mapGet....s b c.c b c.b b s..b b b Pair...mapadd....i...mapCount...idfHandleX c b c.b c foldl..c Pair.ListEmpty....s b b.b s b Pair.fst...c b b.b listAddBack.snd...snd....b idfHandle.fst....idfCount mapCount.listDistinct b b snd..c b c.c b b.foldl..c b Pair.idfCreate..ListEmpty....s b s.c b.b b b s b Pair.fst.....c b c.b b s..b b b c...b c b b.b c.b b if..b c b isEQ.snd...idfCount......c listAddBack......i.....b idfHandle.fst.....newLine ListCons _qadd two.two..ListEmpty..empty ListCons _qadd Zero._qadd Zero.two...ListEmpty..gDrawL b c b c.b b listBind..c c.....c take.nats0...gDraw c b b.b c.b b listBind..c b c.b b c..b b b listConcat...b c.gDrawL.....newLine.....c take.nats0...gCanvas k k empty...gOverlay b b s..b b b s...c b b.b c.b b c..b b if......c ListCons.ListEmpty.....gPixel b b gOverlay..c b b.b c.b b b..b b lAnd..c isEQ......c isEQ....gCircle b b b gOverlay...b b c b b.b b.b isGT.c pow.two.......c b b.b c.b b b..b b add..c b c.b b pow..c diff....two......c b c.b b pow..c diff....two.....beanEmpty k Nothing..beanSet c b c.b b s..c b b.b c.b b if..strEquals....Just.....beanTryGet i.beanGet b maybeGetValue..beanHas b maybeHasValue..seqEmpty Pair Zero.i..seqLength fst.seqGet snd.seqSet c b b.b b.changeSnd...b b s..b c.b b if..isEQ.....seqaddFront s b b.b Pair.b Succ.seqLength....b c b s.c b if.isZero.....c b b.seqGet..pred....seqaddBack s b b.b Pair.b Succ.seqLength....s b c.b b s..b c.b b if..b c isEQ..seqLength......seqGet...seqConcat s b s.b b Pair..c b b.b add.seqLength...seqLength....s b b.b s.s b s.b b if..b c isLT..seqLength....seqGet....b c b b.seqGet...b c sub..seqLength.....seqRangeUnsafe b b c Pair...c b b.b b.seqGet...c sub....seqRange s b s.b b b..seqRangeUnsafe...b b c min...b sub.seqLength....seqToList s b map.seqGet..c b take.seqLength..nats0...listToSeq c c foldr.seqEmpty..seqaddFront.._switchCond c b c.b b b..foldr...b c.c b s.b b if..c b.fst....snd....switchCond c b c._switchCond...switch b c.b b switchCond..c i....switchN c b c.switch..isEQ..getFirstConsumeMoreDeferred b c i..s b y.c b b.b s.c b if.isZero.....b b k..c b.pred.......getFirstConsumeMore b getFirstConsumeMoreDeferred.k.._eCharBrOpen head ListCons _qadd Zero._qadd two.two...ListEmpty..._eCharBrClose head ListCons _qadd one._qadd two.two...ListEmpty..._eCharSqBrOpen head ListCons _qadd three._qadd two._qadd one.one....ListEmpty..._eCharSqBrClose head ListCons _qadd one._qadd three._qadd one.one....ListEmpty..._eCharComma head ListCons _qadd Zero._qadd three.two...ListEmpty..._eCharAbstr head ListCons _qadd Zero._qadd three._qadd one.one....ListEmpty..._eCharOr head ListCons _qadd Zero._qadd three._qadd three.one....ListEmpty..._eCharAnd head ListCons _qadd two._qadd one.two...ListEmpty..._eCharDollar head ListCons _qadd Zero._qadd one.two...ListEmpty..._eCharAssign _qadd one._qadd three.three..._eCharComment _qadd three._qadd one.two..._eStrColon ListCons _qadd two._qadd two.three...ListEmpty.._eIsQuot s b lOr.c isEQ._qadd two._qadd Zero.two.....c isEQ._qadd Zero._qadd Zero._qadd two.one......_eIsNewLine s b lOr.c isEQ._qadd two.two....c isEQ._qadd one.three....ScharParenOpen b k.b k.b k.b k.b k.b k.b k.k........ScharParenOpen_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..b c.c i.....i....i....i....i....i....i....i..ScharParenClose k b k.b k.b k.b k.b k.b k.k........ScharParenClose_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.c i......i....i....i....i....i....i....i..ScharAbstraction k k b k.b k.b k.b k.b k.k........ScharAbstraction_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.c i...i......i....i....i....i....i....i..ScharAssign k k k b k.b k.b k.b k.k........ScharAssign_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.s b c.c i...i...i......i....i....i....i....i..ScharSqBracketOpen k k k k b k.b k.b k.k........ScharSqBracketOpen_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.s b c.s b c.c i...i...i...i......i....i....i....i..ScharSqBracketClose k k k k k b k.b k.k........ScharSqBracketClose_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.s b c.s b c.s b c.c i...i...i...i...i......i....i....i..ScharComma k k k k k k b k.k........ScharComma_Dispatch c b s.b b c..c b s.b b c..c b c.s b c.s b c.s b c.s b c.s b c.c i...i...i...i...i...i......i....i..ScharSingleOr k k k k k k k k........ScharSingleOr_Dispatch c b s.b b c..c b c.s b c.s b c.s b c.s b c.s b c.s b c.c i...i...i...i...i...i...i......i..ScharDollar k k k k k k k k i.........ScharDollar_Dispatch c b c.s b c.s b c.s b c.s b c.s b c.s b c.s b c.c i...i...i...i...i...i...i...i....scharID c c c c c c c c c i.Zero..one..two..three.._qadd Zero.one..._qadd one.one..._qadd two.one..._qadd three.one..._qadd Zero.two...scharEQ c b b.b isEQ.scharID...scharID..schar_String c c c c c c c c c i.ListCons _qadd Zero._qadd three.three...ListCons _qadd Zero._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd Zero._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd two._qadd three.three...ListEmpty............ListCons _qadd Zero._qadd three.three...ListCons _qadd Zero._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd three.three...ListEmpty.............ListCons _qadd Zero._qadd three.three...ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd two._qadd three.three...ListEmpty............ListCons _qadd Zero._qadd three.three...ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd two._qadd Zero.one....ListCons _qadd three._qadd one._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd two._qadd three.three...ListEmpty..........ListCons _qadd Zero._qadd three.three...ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd one.one....ListCons _qadd two._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd Zero._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd two._qadd three.three...ListEmpty.............ListCons _qadd Zero._qadd three.three...ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd one.one....ListCons _qadd two._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd three.three...ListEmpty..............ListCons _qadd Zero._qadd three.three...ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd one._qadd three._qadd Zero.one....ListCons _qadd one._qadd three._qadd Zero.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd three.three...ListEmpty.........ListCons _qadd Zero._qadd three.three...ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd two._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd three._qadd one._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd two._qadd three.three...ListEmpty.............ListCons _qadd Zero._qadd three.three...ListCons _qadd Zero._qadd one._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd two._qadd three.three...ListEmpty..........TokenSpecialChar b b k..b b k..b b k..b b k..b b k..c i.......TokenSpecialChar_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b b.b c.c i....k....k....k....k....k..TokenLiteralLower b k.b b k..b b k..b b k..b b k..c i.......TokenLiteralLower_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.b c i..k......k....k....k....k..TokenLiteralUpper b k.b k.b b k..b b k..b b k..c i.......TokenLiteralUpper_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.b c i..k...k......k....k....k..TokenConstS b k.b k.b k.b b k..b b k..c i.......TokenConstS_Dispatch c b s.b b c..c b s.b b c..c b c.s b c.s b c.b c i..k...k...k......k....k..TokenConstN b k.b k.b k.b k.b b k..c i.......TokenConstN_Dispatch c b s.b b c..c b c.s b c.s b c.s b c.b c i..k...k...k...k......k..TokenComment b k.b k.b k.b k.b k.c i.......TokenComment_Dispatch c b c.s b c.s b c.s b c.s b c.b c i..k...k...k...k...k....tokenLiteral s s b if.b isLowerCaseLetter.head...TokenLiteralLower..TokenLiteralUpper..token_String c c c c c c i.schar_String..b strConss.b ListCons ListCons _qadd Zero._qadd three.three...ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd two._qadd Zero.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd two.two...ListEmpty............c ListCons.ListCons ListCons _qadd one._qadd two.two...ListCons _qadd two._qadd three.three...ListEmpty...ListEmpty......b strConss.b ListCons ListCons _qadd Zero._qadd three.three...ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd two._qadd Zero.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd one._qadd one.one....ListCons _qadd Zero._qadd two.two...ListEmpty............c ListCons.ListCons ListCons _qadd one._qadd two.two...ListCons _qadd two._qadd three.three...ListEmpty...ListEmpty......b strConss.b ListCons ListCons _qadd Zero._qadd three.three...ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd Zero._qadd two.two...ListEmpty..........c ListCons.ListCons ListCons _qadd one._qadd two.two...ListCons _qadd two._qadd three.three...ListEmpty...ListEmpty......b strConss.b ListCons ListCons _qadd Zero._qadd three.three...ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd two.two...ListEmpty..........c b ListCons.strFromN..ListCons ListCons _qadd one._qadd two.two...ListCons _qadd two._qadd three.three...ListEmpty...ListEmpty......k ListCons _qadd Zero._qadd three.three...ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd one._qadd three._qadd Zero.one....ListCons _qadd one._qadd three._qadd Zero.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd two._qadd three.three...ListEmpty............token_String_list c b strJoin.map token_String...ListCons _qadd Zero._qadd Zero.two...ListEmpty...eatParenOpen parseBindOperation parseChar _eCharBrOpen..k TokenSpecialChar ScharParenOpen....eatParenClose parseBindOperation parseChar _eCharBrClose..k TokenSpecialChar ScharParenClose....eatSqBracketOpen parseBindOperation parseChar _eCharSqBrOpen..k TokenSpecialChar ScharSqBracketOpen....eatSqBracketClose parseBindOperation parseChar _eCharSqBrClose..k TokenSpecialChar ScharSqBracketClose....eatComma parseBindOperation parseChar _eCharComma..k TokenSpecialChar ScharComma....eatAbstraction parseBindOperation parseChar _eCharAbstr..k TokenSpecialChar ScharAbstraction....eatAssign parseBindOperation parseChar _eCharAssign..k TokenSpecialChar ScharAssign....eatSingleOr parseBindOperation parseChar _eCharOr..k TokenSpecialChar ScharSingleOr....eatDollar parseBindOperation parseChar _eCharDollar..k TokenSpecialChar ScharDollar....eatLiteral parseBindOperation parseToken.tokenLiteral..eatConstS parseBindOperation parseBindOverride parseCharIf _eIsQuot..parseBindDiscard parseUntil _eIsQuot..parseCharIf _eIsQuot....TokenConstS..eatConstN parseBindOperation parsenumber.TokenConstN..eatComment parseBindOperation parseBindOverride parseChar _eCharComment..parseUntil _eIsNewLine...TokenComment..eatSpecialChar parseOptions ListCons eatParenOpen.ListCons eatParenClose.ListCons eatAbstraction.ListCons eatAssign.ListCons eatSqBracketOpen.ListCons eatSqBracketClose.ListCons eatComma.ListCons eatSingleOr.ListCons eatDollar.ListEmpty...........eatSomething parseWithWhitespace parseOptions ListCons eatSpecialChar.ListCons eatLiteral.ListCons eatConstS.ListCons eatConstN.ListCons eatComment.ListEmpty........token_Process b parseAcceptFullyConsumed.parseWhilesuccessful eatSomething...token_Run b strFromMaybe i..c b maybeMap.token_Process..token_String_list...SyntaxName b b k..b b k..b b k..b b k..b b k..b b k..b b k..c i.........SyntaxName_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b b.b c.c i....k....k....k....b k.k.....b k.k.....b k.k.....b k.k...SyntaxConstN b k.b b k..b b k..b b k..b b k..b b k..b b k..c i.........SyntaxConstN_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.b c i..k......k....k....b k.k.....b k.k.....b k.k.....b k.k...SyntaxConstS b k.b k.b b k..b b k..b b k..b b k..b b k..c i.........SyntaxConstS_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.b c i..k...k......k....b k.k.....b k.k.....b k.k.....b k.k...SyntaxList b k.b k.b k.b b k..b b k..b b k..b b k..c i.........SyntaxList_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.s b c.b c i..k...k...k......b k.k.....b k.k.....b k.k.....b k.k...SyntaxAbstraction b b k..b b k..b b k..b b k..b b b k...b b b k...b b b k...b c.c i..........SyntaxAbstraction_Dispatch c b s.b b c..c b s.b b c..c b s.b b c..c b c.s b c.s b c.s b c.b c i..k...k...k...k......b k.k.....b k.k.....b k.k...SyntaxApplication b b k..b b k..b b k..b b k..b b k..b b b k...b b b k...b c.c i..........SyntaxApplication_Dispatch c b s.b b c..c b s.b b c..c b c.s b c.s b c.s b c.s b c.b c i..k...k...k...k...b k.k.......b k.k.....b k.k...SyntaxAssignment b b k..b b k..b b k..b b k..b b k..b b k..b b b k...b c.c i..........SyntaxAssignment_Dispatch c b s.b b c..c b c.s b c.s b c.s b c.s b c.s b c.b c i..k...k...k...k...b k.k....b k.k.......b k.k...SyntaxType b b k..b b k..b b k..b b k..b b k..b b k..b b k..b c.c i..........SyntaxType_Dispatch c b c.s b c.s b c.s b c.s b c.s b c.s b c.b c i..k...k...k...k...b k.k....b k.k....b k.k.....syntaxCreateApplication c s b foldl.tail..head..SyntaxApplication..syntaxCreateAbstraction c b c.foldr..c SyntaxAbstraction...syntax_String y c b c.s b c.s b c.s b c.b c c c c i.b strConss.b ListCons ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd Zero._qadd two.two...ListEmpty..........c ListCons.ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty......b strConss.b ListCons ListCons _qadd three._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd two.two...ListEmpty.........c b ListCons.strFromN..ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty......b strConss.b ListCons ListCons _qadd three._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd two.two...ListEmpty.........c ListCons.ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.......b b strConss..b b ListCons ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd Zero._qadd two.two...ListEmpty........c b c.b b ListCons..c b c.b b strJoin..map...ListCons _qadd Zero._qadd three.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty......ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.......b b b strConss...b b b ListCons ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd three._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd Zero._qadd two.two...ListEmpty.............b c b b.ListCons...b b ListCons ListCons _qadd Zero._qadd three.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty.....c b c.b ListCons...ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.........b b b strConss...b b b ListCons ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd one._qadd two._qadd three.one....ListCons _qadd Zero._qadd two.two...ListEmpty..........s b c.b b b..b ListCons....b b ListCons ListCons _qadd Zero._qadd three.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty.....c b c.b ListCons...ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.........b b b strConss...b b b ListCons ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd three._qadd one._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd two.two...ListEmpty...........b c b b.ListCons...b b ListCons ListCons _qadd Zero._qadd three.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty.....c b c.b ListCons...ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.........b b strConss..b b ListCons ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd one._qadd two._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd Zero._qadd two.two...ListEmpty........c b b.ListCons..b ListCons ListCons _qadd three._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListEmpty....c b ListCons.c b strJoin.map s b strCons.fst..b strConss.b map strCons ListCons _qadd Zero._qadd Zero.two...ListEmpty....snd......ListCons _qadd Zero._qadd three.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty.....ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.........syntax_String_list c b strJoin.map syntax_String...ListCons _qadd three._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListEmpty....cstrParseAbstractionTail b parsePipe parseSingle..c b TokenLiteralLower_Dispatch.c b b.parseBindOperation..c b c.b b ListCons..SyntaxAbstraction...ListEmpty....parseFail...cstrParseSChar b parsePipe parseSingle..c b TokenSpecialChar_Dispatch.c b c.c b c.b b if..scharEQ...parseReturn i....parseFail...parseFail...cstrParseLiteralL parsePipe parseSingle.TokenLiteralLower_Dispatch parseReturn.parseFail...cstrParseLiteralU parsePipe parseSingle.TokenLiteralUpper_Dispatch parseReturn.parseFail...cstrParseCloseParen cstrParseSChar ScharParenClose..cstrParseCloseSqBr cstrParseSChar ScharSqBracketClose..cstrParseComma cstrParseSChar ScharComma..cstrParseAssign cstrParseSChar ScharAssign..cstrParseSingleOr cstrParseSChar ScharSingleOr..cstrParseDollar cstrParseSChar ScharDollar..cstrParseListTail c b parseBindDiscard.c b parseBindOperation.c b parseOption.s parseBind ListCons..b parseWhilesuccessful.parseBindOverride cstrParseComma.....parseReturn ListEmpty....c b ListCons.SyntaxList..ListEmpty....cstrParseCloseSqBr..cstrParseAssignTail b c b parseBindOperation.parseBindOverride cstrParseAssign....c b c.b b ListCons..SyntaxAssignment...ListEmpty...cstrParseDataDefOption parseBind Pair.cstrParseLiteralU.parseWhilesuccessful cstrParseLiteralL...cstrParseDataDefTail2 parseBind ListCons.cstrParseDataDefOption.parseWhilesuccessful parseBindOverride cstrParseSingleOr.cstrParseDataDefOption....cstrParseDataDefTail b k.b parseBindOperation parseBindOverride cstrParseAssign.cstrParseDataDefTail2...c b c.b b ListCons..SyntaxType...ListEmpty....cstrSyntaxSingle b parsePipe parseSingle..c b c.c b c.c b c.s b c.s b c.b c i..c b c.c b c.c b c.c b c.s b c.c b c.s b c.c b c.b c i..c b parseBindDiscard.c parseBindOperation.listReturn...cstrParseCloseParen....parseFail...cstrParseAbstractionTail...parseFail...cstrParseListTail...parseFail...parseFail...parseFail...parseFail....c b s.b b parseOption..c cstrParseAssignTail....b parseReturn.c b ListCons.SyntaxName..ListEmpty......c b s.b b parseOption..c cstrParseDataDefTail....b parseReturn.c b ListCons.SyntaxName..ListEmpty......b parseReturn.c b ListCons.SyntaxConstS..ListEmpty.....b parseReturn.c b ListCons.SyntaxConstN..ListEmpty.....k parseReturn.ListEmpty....cstrSyntaxApplication s b parsePipe.b parseWhilesuccessful.cstrSyntaxSingle...c b b.b s c b if.listIsEmpty..parseFail...c b b.b parseBindOperation.c b parseOption.c b parseBindOperation.parseBindOverride cstrParseDollar...listReturn...parseReturn ListEmpty.....c b c.c b c.listConcat..u...c b c.c foldl...SyntaxApplication......listBind i....cstrSyntaxEverything parseWhilesuccessful y cstrSyntaxApplication...syntax_Process b parseAcceptFullyConsumed.cstrSyntaxEverything..syntax_Run b strFromMaybe i..c b maybeMap.c b maybeBind.token_Process..syntax_Process...syntax_String_list...NativeAssignment b c.c i...NativeAssignment_Dispatch b k.c i...NativeLiteral b b k..c i...NativeLiteral_Dispatch c b b.b c.c i....b k.k...NativeApplication b b k..b c.c i....NativeApplication_Dispatch c b c.b c i..k....getCollisionFreeLiteral strCons ListCons _qadd two._qadd two.three...ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd three._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListEmpty.......nativeExpr_String y b c c i.b strConss.b ListCons ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd Zero._qadd two.two...ListEmpty..........c ListCons.ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.......b b b strConss...b b b ListCons ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd one._qadd two._qadd three.one....ListCons _qadd Zero._qadd two.two...ListEmpty..........s b c.b b b..b ListCons....b b ListCons ListCons _qadd Zero._qadd three.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty.....c b c.b ListCons...ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty.........nativeDef_String c i.b b strConss..b b ListCons ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd three._qadd one._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd two.two...ListEmpty..........c b b.ListCons..b ListCons ListCons _qadd Zero._qadd three.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty....c b ListCons.nativeExpr_String..ListCons ListCons _qadd one._qadd two.two...ListEmpty..ListEmpty........nativeDef_String_list c b strJoin.map nativeExpr_String...ListCons _qadd three._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListEmpty....nativeExpr_String_list c b strJoin.map nativeDef_String...ListCons _qadd three._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListEmpty....nativeI NativeLiteral ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListCons _qadd one._qadd two._qadd two.one....ListEmpty..........nativeK NativeLiteral ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListCons _qadd three._qadd two._qadd two.one....ListEmpty..........nativeB NativeLiteral ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListEmpty..........nativeC NativeLiteral ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListCons _qadd three._qadd Zero._qadd two.one....ListEmpty..........nativeS NativeLiteral ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListCons _qadd three._qadd Zero._qadd three.one....ListEmpty..........nativeY NativeLiteral ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListCons _qadd one._qadd two._qadd three.one....ListEmpty..........nativeListEmpty NativeLiteral ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd one._qadd three._qadd two.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd one._qadd two._qadd three.one....ListEmpty...........nativeListCons NativeLiteral ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListEmpty..........nativeStrToN NativeLiteral ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd two._qadd three._qadd Zero.one....ListEmpty........native0 NativeLiteral ListCons _qadd two._qadd two._qadd one.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd three._qadd three._qadd two.one....ListEmpty......native1 NativeLiteral ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd two.one....ListEmpty.....native2 NativeLiteral ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd three._qadd one._qadd three.one....ListCons _qadd three._qadd three._qadd two.one....ListEmpty.....native3 NativeLiteral ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd Zero._qadd two._qadd two.one....ListCons _qadd two._qadd Zero._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd one._qadd one._qadd two.one....ListEmpty.......nativeSucc NativeLiteral ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd three._qadd Zero._qadd two.one....ListCons _qadd three._qadd Zero._qadd two.one....ListEmpty......nativeMul NativeLiteral ListCons _qadd one._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd Zero._qadd three._qadd two.one....ListEmpty.....nativeQadd NativeLiteral ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd one._qadd Zero._qadd three.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListEmpty.......isNativeLiteral c b NativeLiteral_Dispatch.strEquals..False..nativeContainsLit y b c b s.c b.strEquals....s b s.b b c..b b b b...b b b lOr...c.....c....finalizeLiteral s s b if.c strStartsWith.ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListEmpty..........drop _qadd three.one....i..finalizeNativeExpr y b c c i.b NativeLiteral.finalizeLiteral....s b c.b b b..b s b s.c b c.b b s..c b b.b b.b if.isNativeLiteral ListCons _qadd one._qadd two._qadd three.one....ListEmpty......c s b NativeApplication_Dispatch.c b c.b if.isNativeLiteral ListCons _qadd three._qadd two._qadd two.one....ListEmpty.......i......i...NativeApplication.....i....finalizeNativeDefs c i.c b b.NativeAssignment..finalizeNativeExpr..._03ToNative c c i.native0..c c i.native1..c c i.native2..c c i.native3..k native0......_nToNative y c b s.c b b.b s b s.b if.isZero....b c b NativeApplication.NativeApplication nativeQadd.......c div._qadd Zero.one.....b _03ToNative.c mod._qadd Zero.one......_sToNative c c foldr.nativeListEmpty..c b NativeApplication.b NativeApplication nativeListCons.._nToNative....._syntaxToNative y c b c.c b c.s b c.s b c.b c c c c i.NativeLiteral.._nToNative.._sToNative...b c c foldr.nativeListEmpty...b c.b b NativeApplication..b NativeApplication nativeListCons........c b b.y c b c.b b s..c b s.b b s..b b b NativeApplication_Dispatch...s b s.b b b..b b s..b b b s...b s b s.b b b..b b if..c nativeContainsLit......s b s.b b s..b b b s...b s b b.b s.b b if..c nativeContainsLit......s b s.b b c..b b b b...b b b NativeApplication...b b NativeApplication nativeS........i......b b b NativeApplication...b b NativeApplication nativeC...........c b c.b b b..b b c..b b b c...b s b b.b s.b b if..c nativeContainsLit......b b s b s.c b if.NativeLiteral_Dispatch k True..False.......b c b b.b NativeApplication.NativeApplication nativeB............NativeApplication nativeK.......c b s.c b c.b b if..c nativeContainsLit....nativeI...NativeApplication nativeK......i.......s b c.b b b..b NativeApplication....i....k k NativeAssignment ListCons _qadd two._qadd one._qadd two.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListEmpty....._sToNative ListCons _qadd two._qadd one._qadd two.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListEmpty...........k NativeAssignment ListCons _qadd two._qadd one._qadd two.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListEmpty....._sToNative ListCons _qadd two._qadd one._qadd two.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListEmpty.........._createUniqueNameFromN b strCons ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListEmpty.........strFromN.._createUniqueNameFromS strCons ListCons _qadd two._qadd two.three...ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd three._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd two._qadd two.three...ListEmpty........._syntaxEmitTypeInstance b c b s.b b c..b b b s...b b b b ListCons....b b b c NativeAssignment....b b b _syntaxToNative...c b b.b s.b b syntaxCreateAbstraction..c listConcat.....b b syntaxCreateApplication..b b map SyntaxName...b ListCons._createUniqueNameFromN............c b c.b b c..b b b ListCons...b b c b NativeAssignment.c strCons.ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd Zero._qadd one._qadd Zero.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd three._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd two._qadd two.one....ListEmpty..............b b _syntaxToNative..c b c.c b c.c b c.b b s b s.b b s..b b b syntaxCreateAbstraction...c b b.b b.ListCons...c b b.ListCons..c ListCons.ListEmpty.........b b b b b syntaxCreateApplication.....b b b b c b ListCons.SyntaxName......c b c.b b c..b b b map...c b c.b b b..b b s..c b b.b c.b b if..c b b.isEQ..snd.....SyntaxName.....b c b syntaxCreateAbstraction.b snd.fst....SyntaxName..........._createUniqueNameFromS ListCons _qadd Zero._qadd one._qadd two.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd three._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListEmpty........_createUniqueNameFromS ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd three.one....ListEmpty......._createUniqueNameFromS ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd one._qadd three._qadd two.one....ListEmpty............ListEmpty..._syntaxEmitTypeStuff k s b c.b b listBind..c b c.b b s..c b c.b b b..c b c.b b s..b b b c...c b c.b b b..b b c.._syntaxEmitTypeInstance....snd.....fst....fst....snd....i..._make__ValueDef SyntaxAssignment ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd two._qadd one._qadd three.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd one._qadd one._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListEmpty........._syntaxToNativeDefs y c b c.c b c.s b s.s b s.s b s.s b s.s b s.b s i..b b k..c b._make__ValueDef.....b b k..c b._make__ValueDef.....b b k..c b._make__ValueDef.....b b k..c b._make__ValueDef.....b b k..b b k..c b._make__ValueDef......b b k..b b k..c b._make__ValueDef......b b listReturn..s b b.NativeAssignment..b b NativeApplication nativeY...b b _syntaxToNative..SyntaxAbstraction.......c b s.c b b.c b b.b c._syntaxEmitTypeStuff...b map _createUniqueNameFromN..c take.nats0.....length...c zip.nats0.....syntaxToNative b map finalizeNativeDefs.._syntaxToNativeDefs.._nlB NativeLiteral ListCons _qadd two._qadd Zero._qadd two.one....ListEmpty..._nlMB NativeLiteral ListCons _qadd one._qadd three._qadd two.one....ListCons _qadd one._qadd Zero._qadd two.one....ListCons _qadd one._qadd two._qadd three.one....ListCons _qadd two._qadd Zero._qadd two.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd two._qadd Zero._qadd Zero.one....ListCons _qadd one._qadd two._qadd two.one....ListCons _qadd two._qadd three._qadd two.one....ListCons _qadd Zero._qadd one._qadd two.one....ListEmpty..........._nlTA NativeLiteral ListCons _qadd Zero._qadd one._qadd three.one....ListCons _qadd one._qadd two._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd Zero._qadd three._qadd two.one....ListCons _qadd one._qadd two._qadd three.one....ListEmpty...........nativeToTypeNative y b c c i.b NativeLiteral.c strCons.ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd one._qadd two._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListEmpty..........s b c.b b b..b b NativeApplication..b NativeApplication _nlMB......c b c.b b NativeApplication..b b NativeApplication _nlB...b NativeApplication _nlMB......_nlTA.....nativeDefToTypeNative c i.c b b.b NativeAssignment.c strCons.ListCons _qadd three._qadd three._qadd one.one....ListCons _qadd Zero._qadd one._qadd one.one....ListCons _qadd one._qadd two._qadd three.one....ListCons _qadd Zero._qadd Zero._qadd three.one....ListCons _qadd one._qadd one._qadd two.one....ListEmpty.........nativeToTypeNative...native_Process b maybeReturn.listBind syntaxToNative...nativeExprToExe y b c c i.i...b b b strConss...s b c.b b b..b ListCons....b b ListCons ListCons _qadd Zero._qadd Zero.two...ListEmpty....c b c.b ListCons...ListCons ListCons _qadd two._qadd three.two...ListEmpty..ListEmpty........nativeDefToExe c b strCons.c i.b b strConss..c b b.ListCons..b ListCons ListCons _qadd Zero._qadd Zero.two...ListEmpty...c b ListCons.nativeExprToExe..ListEmpty.......ListCons _qadd two._qadd three.two...ListEmpty...nativeToObj y b s b c.b c i..s b c.b b Pair..b maybeGetValue....i.....c b s.b b c..b b b c...b b b b Pair....s b s.b b c..b b b b...b b fst......b b fst........i....native_Run b strFromMaybe i..c b maybeMap.c b maybeMap.c b maybeBind.token_Process..syntax_Process...listBind syntaxToNative....c b strJoin.map nativeDefToExe...ListCons _qadd three._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListEmpty......output_Process b strConss.map nativeDefToExe...output_ProcessType b strConss.map b nativeDefToExe.nativeDefToTypeNative....pipeType c b maybeTryGetValue.c b maybeMap.c b maybeBind.c b maybeBind.token_Process..syntax_Process...native_Process...output_ProcessType...ListEmpty..pipe c b maybeTryGetValue.c b maybeMap.c b maybeBind.c b maybeBind.token_Process..syntax_Process...native_Process...output_Process...ListEmpty..fullDebug b strConss.b ListCons ListCons _qadd Zero._qadd three._qadd Zero.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd Zero._qadd two._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd two._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListCons _qadd Zero._qadd Zero.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty...........s b ListCons.token_Run..b ListCons newLine..b ListCons newLine..b ListCons ListCons _qadd Zero._qadd Zero._qadd one.one....ListCons _qadd one._qadd Zero._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd three._qadd Zero._qadd one.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd Zero._qadd one.one....ListCons _qadd two._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListCons _qadd Zero._qadd Zero.two...ListEmpty...........s b ListCons.syntax_Run..b ListCons newLine..b ListCons newLine..b ListCons ListCons _qadd three._qadd Zero._qadd Zero.one....ListCons _qadd three._qadd three._qadd Zero.one....ListCons _qadd Zero._qadd one._qadd Zero.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd three._qadd one._qadd Zero.one....ListCons _qadd one._qadd one._qadd Zero.one....ListCons _qadd two._qadd three._qadd Zero.one....ListCons _qadd two._qadd two.three...ListCons _qadd Zero._qadd Zero.two...ListEmpty...........c b ListCons.native_Run..ListEmpty............run2 b c b maybeMap.c b maybeBind.token_Process..syntax_Process....b b fst..c b b.nativeToObj..b _syntaxToNative.head....."
preludeGet s = envGet s prelude

-- Interop
i = preludeGet "i"
k = preludeGet "k"

probe :: Integer -> Expression
probe 0 = U
probe n = App k (probe $ n-1)

createNum :: Integer -> Expression
createNum 0 = preludeGet "Zero"
createNum n = App (preludeGet "Succ") (createNum $ n-1)

readNum :: Expression -> Integer
readNum x = if pRes == pZero 
                then 0
                else 1 + (readNum $ valueOf $ App (App x U) i)
        where pZero = probe 0
              pSucc = probe 1
              pRes = valueOf $ App (App x pZero) (App k pSucc)

createString :: String -> Expression
createString [] = preludeGet "ListEmpty"
createString (c : cs) = App (App (preludeGet "ListCons") (createNum $ fromIntegral $ ord c)) (createString cs)

readString :: Expression -> String
readString x = if pRes == pEmpty 
                then []
                else (chr $ fromInteger $ readNum $ valueOf $ App (App x U) k) : (readString $ valueOf $ App (App x U) (App k i))
        where pEmpty = probe 0
              pCons = probe 1
              pRes = valueOf $ App (App x pEmpty) (App k (App k pCons))

goed :: Expression -> String
goed U = "1"
goed (App a b) = goed a ++ goed b ++ "0"




