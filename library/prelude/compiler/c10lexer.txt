_eCharBrOpen = strHead "("
_eCharBrClose = strHead ")"
_eCharSqBrOpen = strHead "["
_eCharSqBrClose = strHead "]"
_eCharComma = strHead ","
_eCharAbstr = strHead "\"
_eCharOr = strHead "|"
_eCharAnd = strHead "&"
_eCharDollar = strHead "$"
_eCharAssign = 61
_eCharComment = 39
_eStrColon = strReturn 58
_eIsQuot = \x or (isEQ x 34) (isEQ x 96)
_eIsNewLine = \x or (isEQ x 10) (isEQ x 13)

' special chars
Schar = ScharParenOpen
      | ScharParenClose
      | ScharAbstraction
      | ScharAssign
      | ScharSqBracketOpen
      | ScharSqBracketClose
      | ScharComma
      | ScharSingleOr
      | ScharDollar

scharID = \s s 0 1 2 3 4 5 6 7 8
scharEQ = \a \b isEQ (scharID a) (scharID b)

schar_String = \x x
        "<PAR_OPEN>"
        "<PAR_CLOSE>"
        "<ABSTRACT>"
        "<ASSIGN>"
        "<SQBR_OPEN>"
        "<SQBR_CLOSE>"
        "<COMMA>"
        "<SINGLE_OR>"
        "<DOLLAR>"

' tokens
Token = TokenSpecialChar schar      ' schar
      | TokenLiteralLower literal   ' S
      | TokenLiteralUpper literal   ' S
      | TokenConstS value           ' S
      | TokenConstN value           ' N
      | TokenComment value          ' S

tokenLiteral = \literal if(isLowerCaseLetter (strHead literal)) (TokenLiteralLower literal) (TokenLiteralUpper literal) 

token_String = \x x
        schar_String
        (\literal strConss ["<LITERALL(", literal, ")>"])
        (\literal strConss ["<LITERALU(", literal, ")>"])
        (\value strConss ["<CONSTS(", value, ")>"])
        (\value strConss ["<CONSTN(", strFromN value, ")>"])
        (k "<COMMENT>")
token_String_list = \xs strJoin (listMap xs token_String) " "

' :: Parser Token
eatParenOpen        = parseBindOperation (parseChar _eCharBrOpen)    $ k $ TokenSpecialChar ScharParenOpen
eatParenClose       = parseBindOperation (parseChar _eCharBrClose)   $ k $ TokenSpecialChar ScharParenClose
eatSqBracketOpen    = parseBindOperation (parseChar _eCharSqBrOpen)  $ k $ TokenSpecialChar ScharSqBracketOpen
eatSqBracketClose   = parseBindOperation (parseChar _eCharSqBrClose) $ k $ TokenSpecialChar ScharSqBracketClose
eatComma            = parseBindOperation (parseChar _eCharComma)     $ k $ TokenSpecialChar ScharComma
eatAbstraction      = parseBindOperation (parseChar _eCharAbstr)     $ k $ TokenSpecialChar ScharAbstraction
eatAssign           = parseBindOperation (parseChar _eCharAssign)    $ k $ TokenSpecialChar ScharAssign
eatSingleOr         = parseBindOperation (parseChar _eCharOr)        $ k $ TokenSpecialChar ScharSingleOr
eatDollar           = parseBindOperation (parseChar _eCharDollar)    $ k $ TokenSpecialChar ScharDollar

eatLiteral = parseBindOperation parseToken (\x tokenLiteral x)
eatConstS  = parseBindOperation (parseBindOverride (parseCharIf _eIsQuot) (parseBindDiscard (parseUntil _eIsQuot) (parseCharIf _eIsQuot))) (\x TokenConstS x)
eatConstN  = parseBindOperation parsenumber (\x TokenConstN x)
eatComment = parseBindOperation (parseBindOverride (parseChar _eCharComment) (parseUntil _eIsNewLine)) (\x TokenComment x)

eatSpecialChar = parseOptions
            [
                eatParenOpen, 
                eatParenClose,
                eatAbstraction,
                eatAssign,
                eatSqBracketOpen, 
                eatSqBracketClose, 
                eatComma,
                eatSingleOr,
                eatDollar
            ]
eatSomething = parseWithWhitespace $ parseOptions 
        [ 
            eatSpecialChar,
            eatLiteral, 
            eatConstS, 
            eatConstN,
            eatComment
        ]
            

' S => M [Token]
token_Process = b parseAcceptFullyConsumed $ parseWhilesuccessful eatSomething

' S => S
token_Run = \s (strFromMaybe i (maybeMap (token_Process s) token_String_list))

' SAMPLE USAGE
' : (strFromMaybe (\f (B strFromN token_Type) f) (parseAcceptFullyConsumed (eatSomething "=")))
' : (token_Run "asd")

