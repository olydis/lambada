SyntaxExpression = SyntaxName literal                             ' S
                 | SyntaxConstN value                             ' N
                 | SyntaxConstS value                             ' S
                 | SyntaxList list                                ' [SYNTAX]
                 | SyntaxAbstraction literal body                 ' S SYNTAX
                 | SyntaxApplication o1 o2                        ' SYNTAX SYNTAX
                 | SyntaxAssignment literal o                     ' S SYNTAX
                 | SyntaxType literalType listPairInstanceArgs    ' S [(S, [S])]

syntaxCreateApplication = \syntaxes foldl (tail syntaxes) (head syntaxes) SyntaxApplication
syntaxCreateAbstraction = \literals \body foldr literals body (\x \lit SyntaxAbstraction lit x)

syntax_String = y $ \this \x
    x
        (\literal strConss ["literal(", literal, ")"])
        (\value strConss ["constn(", strFromN value, ")"])
        (\value strConss ["consts(", value, ")"])
        (\list strConss ["list(", strJoin (map this list) ", ", ")"])
        (\literal \body strConss ["abstract(", literal, ", ", this body, ")"])
        (\o1 \o2 strConss ["apply(", this o1, ", ", this o2, ")"])
        (\literal \o strConss ["assign(", literal, ", ", this o, ")"])
        (\literalType \listPairInstanceArgs strConss ["type(", literalType, "; ", (strJoin (map (\pair strCons (fst pair) (strConss (map (strCons " ") (snd pair)))) listPairInstanceArgs) ", "), ")"])
syntax_String_list = \xs strJoin (map syntax_String xs) "; "

' B :=  lit=E | \lit E | lit | constS | constN | (E) | comment | [E*]   'return [Syntax]
' E :=  app  :=  B* | B* $ E                                            'return Syntax


cstrParseAbstractionTail = \e 
    parsePipe
        parseSingle
        (TokenLiteralLower_Dispatch 
            (\literal parseBindOperation 
                e
                (\rese [SyntaxAbstraction literal rese])
            ) 
            parseFail)

cstrParseSChar = \specialChar 
    parsePipe
        parseSingle
        (TokenSpecialChar_Dispatch  
            (\schar if(scharEQ specialChar schar)
                (parseReturn i)
                parseFail
            )
            parseFail)

cstrParseLiteralL = parsePipe
        parseSingle
        (TokenLiteralLower_Dispatch parseReturn parseFail)
cstrParseLiteralU = parsePipe
        parseSingle
        (TokenLiteralUpper_Dispatch parseReturn parseFail)
        
cstrParseCloseParen = cstrParseSChar ScharParenClose
cstrParseCloseSqBr = cstrParseSChar ScharSqBracketClose
cstrParseComma = cstrParseSChar ScharComma
cstrParseAssign = cstrParseSChar ScharAssign
cstrParseSingleOr = cstrParseSChar ScharSingleOr
cstrParseDollar = cstrParseSChar ScharDollar

        
cstrParseListTail = \e parseBindDiscard 
                    (parseBindOperation 
                        (
                            parseOption
                            (
                                parseBind
                                    ListCons
                                    e
                                    (parseWhilesuccessful $ parseBindOverride cstrParseComma e)
                            )
                            (parseReturn ListEmpty)
                        )
                        (\list [SyntaxList list])
                    )
                    cstrParseCloseSqBr

cstrParseAssignTail = \literal \e parseBindOperation 
                        (parseBindOverride cstrParseAssign e)
                        (\body [SyntaxAssignment literal body])

cstrParseDataDefOption = parseBind
                            (\name \args Pair name args)
                            cstrParseLiteralU
                            (parseWhilesuccessful cstrParseLiteralL)
cstrParseDataDefTail2 = parseBind
                            ListCons
                            cstrParseDataDefOption
                            (parseWhilesuccessful (parseBindOverride cstrParseSingleOr cstrParseDataDefOption))
cstrParseDataDefTail = \literal \e parseBindOperation 
                        (parseBindOverride cstrParseAssign cstrParseDataDefTail2) 
                        (\list [SyntaxType literal list])

' B:
' Parser [Syntax]
cstrSyntaxSingle = \e
    parsePipe
        parseSingle
        (\token token
            (\schar schar
                (parseBindDiscard (parseBindOperation e listReturn) cstrParseCloseParen)
                parseFail
                (cstrParseAbstractionTail e)
                parseFail
                (cstrParseListTail e)
                parseFail
                parseFail
                parseFail
                parseFail
            )
            (\literal 
                parseOption
                    (cstrParseAssignTail literal e)
                    (parseReturn [SyntaxName literal])
            )
            (\literal 
                parseOption
                    (cstrParseDataDefTail literal e)
                    (parseReturn [SyntaxName literal])
            )
            (\value parseReturn $ [SyntaxConstS value])
            (\value parseReturn $ [SyntaxConstN value])
            (k parseReturn ListEmpty)
        )

' E:
cstrSyntaxApplication = \e 
                        parsePipe
                            (parseWhilesuccessful $ cstrSyntaxSingle e)
                            (\list 
                                (\ops 
                                    if(listIsEmpty ops) 
                                    parseFail
                                    (parseBindOperation
                                        (parseOption
                                            (parseBindOperation (parseBindOverride cstrParseDollar e) listReturn)
                                            (parseReturn ListEmpty)
                                        )
                                        (\tailx listConcat ops tailx u $ 
                                            \head \tail foldl tail head SyntaxApplication)
                                    )
                                ) (listBind i list)
                            )

cstrSyntaxEverything = parseWhilesuccessful $ y cstrSyntaxApplication

' [TOKEN] => M [SyNTAX]
syntax_Process = b parseAcceptFullyConsumed cstrSyntaxEverything

' S => S
syntax_Run = \s strFromMaybe i $ maybeMap (maybeBind (token_Process s) syntax_Process) syntax_String_list
