I = U U.
K = U U I..
S = U K.
B = S K S.. K.
C = S S K S.. S K K.. S... K K..
I = I
K = K
S = S
B = B
C = C
M = S I. I.
Y = B M. C B. S I. I...
TRUE = K
FALSE = K I.
IF = I
NOT = C C I. FALSE.. TRUE.
AND = C C. FALSE.
OR = C I. TRUE.
IMPLIES = C C. TRUE.
XOR = C B S. C B B. IF.. NOT... I.
EQ = B B NOT.. XOR.
Succ = S B.
zero = K I.
one = Succ zero.
Apply = I
Add = S I. K S B...
Mul = B
Pow = S K S S S K..... K.
isZero = C C I. K FALSE... TRUE.
makePair = B C. C I..
fst = C I. K.
snd = C I. K I..
changeFst = S B C. B B makePair.. B C I.. fst.... snd.
changeSnd = S B B. B makePair. fst... B C I.. snd..
Pred = B B B snd... C B C. B B B.. C B. B B makePair FALSE... C B S. C C B IF. fst.. I.... snd...... makePair TRUE...
Sub = Y B S B S. C B IF. isZero..... C B C. B B B.. C B. Pred.... Pred...
isEQ = S B S. B B AND.. B B isZero.. Sub.... B B isZero.. C Sub...
isLTE = B B isZero.. Sub.
isGTE = C isLTE.
isLT = B B NOT.. isGTE.
isGT = B B NOT.. isLTE.
Min = C B S. S B C. B B IF.. isLT... I... I.
Max = C B S. S B C. B B IF.. isGT... I... I.
Mod = Y B S B S. S B C. B B IF.. isLT... I.... C B C. B B S.. C B B. B.. Sub.... I...
Div = Y B S B S. C B C. B B IF.. isLT... zero.... B B B Succ... C B C. B B S.. C B B. B.. Sub.... I....
ZfromN = makePair FALSE.
Zzero = ZfromN zero.
ZisZero = B isZero. snd.
ZisNeg = fst
ZabsN = snd
Znorm = S C B IF. ZisZero.. Zzero.. I.
ZNegate = B Znorm. S B makePair. B NOT. ZisNeg... snd..
ZSucc = B Znorm. S B makePair. ZisNeg.. S S B IF. ZisNeg.. B Pred. snd... B Succ. snd....
ZPred = B ZNegate. B ZSucc. ZNegate..
ZMul = B B Znorm.. S B S. B B makePair.. C B B. B XOR. ZisNeg... ZisNeg.... C B B. B Mul. ZabsN... ZabsN...
ZDiv = B B Znorm.. S B S. B B makePair.. C B B. B XOR. ZisNeg... ZisNeg.... C B B. B Div. ZabsN... ZabsN...
xzadd = S B S. B S B IF. B NOT. ZisNeg.... B B ZfromN.. C B B. B Add. ZabsN... ZabsN..... S B S. S B S. B B IF.. C B B. B isLT. ZabsN... ZabsN.... B B makePair TRUE... B C B Sub. ZabsN... ZabsN..... B B makePair FALSE... C B B. B Sub. ZabsN... ZabsN....
ZAdd = B B Znorm.. S B S. S B B. B IF. ZisNeg... B B ZNegate.. C B B. B xzadd. ZNegate... ZNegate..... xzadd..
ZSub = C B B. ZAdd.. ZNegate.
ZMod = B B Znorm.. C B B. changeSnd.. B C Mod.. ZabsN...
ZModX = B B Znorm.. C B S. B B changeSnd.. C B S. B B ZAdd.. C B B. changeSnd.. B C Mod.. ZabsN..... I.... B C Mod.. ZabsN...
listIsNotEmpty = fst
listIsEmpty = B NOT. listIsNotEmpty.
listHead = B fst. snd.
listTail = B snd. snd.
listEmpty = makePair FALSE. I.
listAddFront = B B makePair TRUE... C makePair..
foldl = Y C B C. B B S.. B B B C... B S B B. B B. B IF. listIsNotEmpty..... C B C. B B C.. B B B S... C B S. B B B.. B B B.. C B. listTail..... B C B C. C I.... listHead...... I...... I..
foldr = Y C B C. B B S.. B B B C... B S B B. B B. B IF. listIsNotEmpty..... C B S. B B C.. B B B C... B B B S I.... C B. listTail...... listHead...... I..
reverseBag = Y C B C. B B S.. B S B B. B IF. listIsNotEmpty.... C B S. B B B.. C B. listTail.... B C listAddFront.. listHead...... I..
reverse = C reverseBag. listEmpty.
unfold = Y C B S. B B C.. B B B listAddFront... C B C. B B S.. C B B. B.. C I..... I..... I..
repeat = C unfold. I.
listCons = C B C. foldr.. listAddFront.
listReturn = listAddFront listEmpty.
listAddBack = C B B. listCons.. listReturn.
cfold = Y C B C. B B S.. B B B C... B B B B listAddFront.... B S B B. B B. C B IF. listIsEmpty.. listEmpty..... C B C. B B C.. B B B S... C B S. B B B.. B B B.. C B. listTail..... B C B C. C I.... listHead...... I....... I..
listTake = Y B S B S. C B C. B B IF.. B C B OR. isZero... listIsEmpty.... listEmpty.... C B S. B B C.. B B B listAddFront... C B C. B B B.. C B. listTail.... Pred..... listHead...
listTakeWhile = Y B S B S. C B C. B B IF.. S B B. B OR. listIsEmpty... B B NOT.. B C I.. listHead...... listEmpty.... C B S. B B C.. B B B listAddFront... C B. listTail..... listHead...
listBind = C B B. C foldl. listEmpty... C B B. listCons...
listMap = C B B. listBind.. B listReturn..
listWhere = C B B. C foldr. listEmpty... C B S. B B C.. C B B. B S. B IF.... listAddFront.... I..
listSkip = Y B S B S. S B C. B B IF.. B C B OR. isZero... listIsEmpty.... I.... C B C. B B B.. C B. listTail.... Pred...
listSkipWhile = Y C B S. B B C.. B S B S. B B IF.. S B C. B B AND.. B C I.. listHead.... B NOT. listIsEmpty...... C B. listTail..... I..
listAny = B B NOT.. B B listIsEmpty.. listWhere..
listAll = B B NOT.. C B B. listAny.. B NOT...
ORs = C listAny. I.
ANDs = C listAll. I.
listCount = C C foldl. zero.. B K. Succ..
listZip = Y B S B S. B B B.. C B C. B B IF.. C B B. B OR. listIsEmpty... listIsEmpty.... listEmpty..... C B S. B B S.. B B B S... B B B B listAddFront.... C B C. B B B.. C B. listTail.... listTail...... C B B. B C. B C I.. listHead.... listHead....
listZipLonger = Y B S B S. B B S.. B B B S... S B S. B B B.. B B B.. B B IF.. C B B. B OR. listIsEmpty... listIsEmpty...... S B C. B B S.. B B B S... C B B. B B. B B. B IF. listIsEmpty..... C B listZip. repeat....... C B B. listZip.. repeat........ C B S. B B S.. B B B C... B B B B S.... B B B B B listAddFront..... C B C. B B B.. C B. listTail.... listTail....... C B B. B C. B C I.. listHead.... listHead....
listEquals = B S B S. B B AND.. C B B. B isEQ. listCount... listCount..... C B C. B B C.. B B B listAll... C B C. listZip...... I..
strEquals = listEquals isEQ.
listMerge = B Y. B B S B S. B IF. listIsEmpty..... B B S B S. C B IF. listIsEmpty...... C B S. B B S.. B B B S... C B B. B S. B B S.. B B B IF... C B C. B B B.. C B. listHead.... listHead...... C B S. B B C.. B B B listAddFront... C B. listTail..... listHead...... C B C. B B S.. B B B listAddFront... C B C. B B... listTail..... listHead.....
listSort = B Y. C B C. B B S.. B B S B IF. C B isGT. listCount.. 1..... C B C. B B S.. C B S. B B S.. B B B S... C B B. B B. B B. listMerge.... C B B. B.. listTake...... C B B. B.. listSkip..... C B Div. listCount.. 2...... I..
intSort = listSort isLT.
listElementAt = B B listHead.. listSkip.
strIsEmpty = listIsEmpty
strIsNotEmpty = B NOT. strIsEmpty.
strHead = listHead
strTail = listTail
strEmpty = listEmpty
strAddFront = listAddFront
strAddBack = listAddBack
strCons = listCons
strSkip = listSkip
strTake = listTake
strReturn = listReturn
strWhere = listWhere
listJoin = S B B. C B IF. listIsEmpty.. listEmpty... C B B. S B foldl. listTail.. listHead... B B listCons.. C listCons....
strJoin = S B B. C B IF. strIsEmpty.. strEmpty... C B B. S B foldl. listTail.. listHead... B B strCons.. C strCons....
strConss = C strJoin. "".
Nats0 = unfold zero. Succ.
Nats = unfold one. Succ.
zeroes = repeat 0.
ByteVals = listTake Nats0. 256.
toBinSeq = C B listMap. C B listTakeWhile. C unfold. C Div. 2.... B NOT. isZero.... C Mod. 2..
fromBinSeq = C C B foldl. C C listZip. Nats0.. C B B. Mul.. Pow 2..... 0.. Add.
Xor = B B fromBinSeq.. C B C. C B C. C B B. B listZipLonger. toBinSeq... toBinSeq... 0... C B C. B B Mod.. Add... 2...
isAlpha = B ORs. S B listAddFront. S B listAddFront. B listAddFront listEmpty.. C isEQ. 95.... S B AND. C isGT. 96... C isLT. 123..... S B AND. C isGT. 64... C isLT. 91....
Alpha = strWhere ByteVals. isAlpha.
isNum = S B AND. C isGT. 47... C isLT. 58..
Num = strWhere ByteVals. isNum.
isAlphaNum = S B OR. isAlpha.. isNum.
AlphaNum = strCons Alpha. Num.
isWhiteSpace = C isLT. 34.
WhiteSpace = strWhere ByteVals. isWhiteSpace.
NewLine = strAddFront strReturn 10.. 13.
halt = Y C B S. C B C. C IF... I... I..
fak = C C B foldl. listTake Nats... one.. Mul.
xstrFromNat = Y B S B S. C B IF. isZero..... C B C. B B S.. C B B. B.. C B B. strAddFront.. B Add 48.. C Mod. 10....... C Div. 10....
strFromN = S C B IF. isZero.. strReturn 48... xstrFromNat strEmpty..
strFromNs = C listBind. C B strAddBack. strFromN.. 32..
strFromZ = S S B IF. ZisNeg.. C B strAddFront. B strFromN. ZabsN... 45... B strFromN. ZabsN..
strToN = C C foldl. 0.. C B B. B Add. C Mul. 10.... C Sub. 48...
strFromB = C C IF. "TRUE".. "FALSE".
strFromS = B strConss. C B listAddFront. listAddFront listAddFront listEmpty. strReturn 96..... strReturn 96...
strFromPair = B B B strConss... C B C. B B C.. B B B listAddFront... B C B S. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ")".... C B. snd..... " ; "..... C B. fst...... "("..
listCutAt = Y B S B S. S B C. B B IF.. S B B. B OR. listIsEmpty... B C I.. listHead..... makePair listEmpty..... C B S. B B C.. B B B changeFst... C B. listTail..... B C listAddFront.. listHead....
strFromSS = C C foldl. strEmpty.. C B B. strCons.. C strAddBack. 10...
xlistSplitAt = C B B. B unfold. C listCutAt. K TRUE..... C B C. B B changeSnd.. C B listCutAt. snd..... C listSkip. one...
listSplitAt = C B C. B B listBind.. C B C. B B listCutAt.. C B C. B B listSkip.. xlistSplitAt... one.... B listIsEmpty. snd..... B listReturn. snd..
listContains = C B B. B B. listAny... C I..
strContains = C B C. listContains.. isEQ.
listRepeat = C B C. B B listBind.. C B listTake. repeat..... I.
strBurst = C listMap. listReturn.
strTrim = B reverse. C B listSkipWhile. B reverse. C listSkipWhile. isWhiteSpace.... isWhiteSpace..
strCutAt = listCutAt
maybeReturn = makePair TRUE.
maybeNothing = makePair FALSE. I.
maybeHasValue = fst
maybeGetValue = snd
maybeBind = C B C. S B B. B IF. maybeHasValue... B C I.. maybeGetValue.... maybeNothing.
maybeMap = C B B. maybeBind.. B maybeReturn..
maybeAlternative = S B IF. maybeHasValue.. I.
maybeTryGetValue = B B maybeGetValue.. C B B. maybeAlternative.. maybeReturn..
strFromMaybe = C B C. B S B IF. maybeHasValue... B B strCons "Just "... C B. maybeGetValue..... "Nothing".
parseReturn = B B maybeReturn.. C makePair..
parseFail = K maybeNothing.
parseOperation = B C maybeMap.. C changeSnd..
parseBindOperation = C B B. parseOperation..
parsePipe = C B B. B C. B maybeBind.... C B S. C B. snd... fst..
parseBind = B C B B. B C. B maybeBind..... C B B. B S. B B parseOperation.. C B. snd..... C B. fst...
parseBindDiscard = parseBind K.
parseBindOverride = parseBind K I..
parseBindPair = parseBind makePair.
parseCharIf = C B S. C B S. B B IF.. B S B AND. B NOT. listIsEmpty.... C B. listHead..... S B parseReturn. listHead.. listTail.... parseFail.
parseCharX = B parseCharIf. C B C. listContains.. isEQ..
parseChar = B parseCharIf. isEQ.
parseString = C C B foldl. C listMap. parseChar... parseReturn strEmpty... parseBind strAddBack..
parseUntil = B B S B parseReturn. fst.. snd... C strCutAt..
parseWhile = B parseUntil. B NOT..
parseWhileMinOne = B S C B S. B C B IF. B strIsEmpty. B snd. maybeGetValue..... parseFail... I... parseWhile.
parseOption = B S. B maybeAlternative..
parseOptions = Y B S B B. C B IF. listIsEmpty.. maybeNothing.... B S B S. B B maybeAlternative.. listHead.... C B. listTail....
parseWhitespace = parseWhile isWhiteSpace.
parseWithWhitespace = C B parseBindDiscard. parseBindOverride parseWhitespace... parseWhitespace.
parseToken = parseBind C strAddFront.. parseCharIf isAlpha.. parseWhile isAlphaNum..
parseNumber = parseBindOperation parseWhileMinOne isNum.. strToN.
parseDump = B strFromMaybe. strFromPair strFromS..
parseAccept = B C maybeBind.. C B C. C B S. B B IF.. C B. fst.... B maybeReturn. snd.... maybeNothing..
parseAcceptAll = parseAccept K TRUE..
parseAcceptFullyConsumed = parseAccept listIsEmpty.
parseWhileSuccessfulInternal = Y C B S. B B S.. C B C. B B B.. B B C.. B B S B IF. maybeHasValue.... B B S B C changeSnd.. B C listAddFront.. B snd. maybeGetValue...... C B C. B B... B fst. maybeGetValue........ C makePair. listEmpty..... I..
parseWhileSuccessful = B B maybeReturn.. parseWhileSuccessfulInternal.
mapCreate = C makePair. listEmpty.
mapGetAll = S B B. B listWhere. snd... C B C. B B B.. fst... fst..
mapHasKey = C B C. B B listAny.. mapGetAll... K TRUE..
mapCount = B listCount. snd.
mapAdd = C B B. B B. changeSnd... B B C listAddFront... makePair..
mapRemove = S B B. changeSnd.. B B C listWhere... B B B NOT... C B C. B B B.. fst... fst....
mapSet = C B S. B B mapAdd.. mapRemove... I.
mapGet = B B snd.. B B listHead.. mapGetAll..
idfCreate = mapCreate
idfHandle = S B S. S B S. B B IF.. mapHasKey... S B B. makePair.. mapGet.... S B C. C B C. B B S.. B B B makePair... mapAdd.... I... mapCount..
idfHandleX = C B C. B C foldl.. C makePair. listEmpty.... S B B. B S B makePair. fst... C B B. B listAddBack. snd... snd.... B idfHandle. fst...
idfCount = mapCount
listDistinct = B B snd.. C B C. C B B. foldl.. C B makePair. idfCreate.. listEmpty.... S B S. B B S B makePair. fst.... S B C. B B C.. S B B. B C. B B IF.. B C B isEQ. snd... B idfCount. fst...... B listAddBack. snd..... snd.... B idfHandle. fst....
newLine = strReturn 10.
empty = strReturn 32.
diff = S B S. S B S. B B IF.. isLT... C Sub.... Sub.
gDrawL = C B B. B B. B listBind. listTake Nats0..... C C..
gDraw = B C B B. B listBind. listTake Nats0..... C B C. B B C.. B B B listCons... B C. gDrawL..... newLine..
gCanvas = K K empty..
gOverlay = B B S.. B B B S... C B B. B C. B B C.. B B IF...... listReturn...
gPixel = B B gOverlay.. C B B. B C. B B B.. B B AND.. C isEQ...... C isEQ...
gCircle = B B B gOverlay... B B C B B. B B. B isGT. C Pow. 2....... C B B. B C. B B B.. B B Add.. C B C. B B Pow.. C diff.... 2...... C B C. B B Pow.. C diff.... 2....
makeTriple = B B C.. B C. C I...
tfst = C I. B K. K..
tsnd = C I. K K..
ttrd = C I. K K I...
tchangeFst = S B C. S B C. B B makeTriple.. B C I.. tfst.... tsnd... ttrd.
tchangeSnd = S B C. S B B. B makeTriple. tfst... B C I.. tsnd.... ttrd.
tchangeTrd = S B B. S B makeTriple. tfst.. tsnd... B C I.. ttrd..
beanEmpty = K maybeNothing.
beanSet = C B C. B B S.. C B B. B C. B B IF.. strEquals.... maybeReturn....
beanTryGet = I
beanGet = B maybeGetValue.
beanHas = B maybeHasValue.
seqEmpty = makePair 0. I.
seqLength = fst
seqGet = snd
seqSet = C B B. B B. changeSnd... B B S.. B C. B B IF.. isEQ....
seqAddFront = S B B. B makePair. B Succ. seqLength.... B C B S. C B IF. isZero..... C B B. seqGet.. Pred...
seqAddBack = S B B. B makePair. B Succ. seqLength.... S B C. B B S.. B C. B B IF.. B C isEQ.. seqLength...... seqGet..
seqConcat = S B S. B B makePair.. C B B. B Add. seqLength... seqLength.... S B B. B S. S B S. B B IF.. B C isLT.. seqLength.... seqGet.... B C B B. seqGet... B C Sub.. seqLength....
seqRangeUnsafe = B B C makePair... C B B. B B. seqGet... C Sub...
seqRange = S B S. B B B.. seqRangeUnsafe... B B C Min... B Sub. seqLength...
seqToList = S B listMap. B listTake Nats0.. seqLength... seqGet.
listToSeq = C C foldr. seqEmpty.. seqAddFront.
listHeadOrDefault = S B C. B IF. listIsEmpty... listHead.
_switchCond = C B C. B B B.. foldr... B C. C B S. B B IF.. C B. fst.... snd...
switchCond = C B C. _switchCond..
switch = B C. B B switchCond.. C I...
switchN = C B C. switch.. isEQ.
getFirstConsumeMoreDeferred = B C I.. S B Y. C B B. B S. C B IF. isZero..... B B K.. C B. Pred......
getFirstConsumeMore = B getFirstConsumeMoreDeferred. K.
_eCharBrOpen = strHead "(".
_eCharBrClose = strHead ")".
_eCharSqBrOpen = strHead "[".
_eCharSqBrClose = strHead "]".
_eCharComma = strHead ",".
_eCharAbstr = strHead "\".
_eCharAssign = 61
_eCharComment = 39
_eStrColon = strReturn 58.
_eIsQuot = S B OR. C isEQ. 34... C isEQ. 96..
_eIsNewLine = S B OR. C isEQ. 10... C isEQ. 13..
tokenParenOpen = C I. 0.
tokenParenClose = C I. 1.
tokenAbstraction = C I. 2.
tokenAssign = C I. 3.
tokenSqBracketOpen = C I. 4.
tokenSqBracketClose = C I. 5.
tokenComma = C I. 6.
tokenLiteral = C C I. 10..
tokenConstS = C C I. 11..
tokenConstN = C C I. 12..
tokenComment = C C I. 13..
token_VarCount = C C B IF. C isLT. 10... 0.. 1.
token_Type = getFirstConsumeMoreDeferred token_VarCount.
token_String = S B S C B IF. C I. 0... "<PAR_OPEN>"... B S C B IF. C I. 1... "<PAR_CLOSE>"... B S C B IF. C I. 2... "<ABSTRACT>"... B S C B IF. C I. 3... "<ASSIGN>"... B S C B IF. C I. 4... "<SQBR_OPEN>"... B S C B IF. C I. 5... "<SQBR_CLOSE>"... B S C B IF. C I. 6... "<COMMA>"... S B S. B C B IF. C I. 10.... B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")>"... C I. K I..... "<LITERAL("..... S B S. B C B IF. C I. 11.... B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")>"... C I. K I..... "<CONSTS("..... C B S. B C B IF. C I. 12.... B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")>"... B strFromN. C I. K I...... "<CONSTN("..... C C B IF. C I. 13... "<COMMENT>".. "<!!!UNKNOWN!!!>"............ B isEQ. token_Type..
token_String_list = C B strJoin. C listMap. token_String... " ".
eatParenOpen = parseBindOperation parseChar _eCharBrOpen.. K tokenParenOpen..
eatParenClose = parseBindOperation parseChar _eCharBrClose.. K tokenParenClose..
eatSqBracketOpen = parseBindOperation parseChar _eCharSqBrOpen.. K tokenSqBracketOpen..
eatSqBracketClose = parseBindOperation parseChar _eCharSqBrClose.. K tokenSqBracketClose..
eatComma = parseBindOperation parseChar _eCharComma.. K tokenComma..
eatAbstraction = parseBindOperation parseChar _eCharAbstr.. K tokenAbstraction..
eatAssign = parseBindOperation parseChar _eCharAssign.. K tokenAssign..
eatLiteral = parseBindOperation parseOption parseToken. parseString ":"... tokenLiteral.
eatConstS = parseBindOperation parseBindOverride parseCharIf _eIsQuot.. parseBindDiscard parseUntil _eIsQuot.. parseCharIf _eIsQuot.... tokenConstS.
eatConstN = parseBindOperation parseNumber. tokenConstN.
eatComment = parseBindOperation parseBindOverride parseChar _eCharComment.. parseUntil _eIsNewLine... tokenComment.
eatSomething = parseWithWhitespace parseOptions listAddFront listAddFront listAddFront listAddFront listAddFront listAddFront listAddFront listAddFront listAddFront listAddFront listAddFront listEmpty. eatComma.. eatSqBracketClose.. eatSqBracketOpen.. eatComment.. eatAssign.. eatConstN.. eatConstS.. eatLiteral.. eatAbstraction.. eatParenClose.. eatParenOpen...
token_Process = B parseAcceptFullyConsumed. parseWhileSuccessful eatSomething..
token_Run = B strFromMaybe I.. C B maybeMap. token_Process.. token_String_list..
syntaxLiteral = C C I. 0..
syntaxConstN = C C I. 1..
syntaxConstS = C C I. 2..
syntaxList = C C I. 3..
syntaxAbstraction = B C. C C I. 10...
syntaxApplication = B C. C C I. 11...
syntaxAssignment = B C. C C I. 12...
syntax_VarCount = C C B IF. C isLT. 10... 1.. 2.
syntax_Type = getFirstConsumeMoreDeferred syntax_VarCount.
syntax_String = Y C B C. B S B switchN. syntax_Type... C B S. B B listAddFront.. C B S. B B listAddFront.. C B S. B B listAddFront.. S B S. B B listAddFront.. S B S. B B listAddFront.. S B S. B B listAddFront.. B B listAddFront listEmpty... B B makePair 12... B B strConss.. C B C. B B listAddFront.. C B S. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ")".... C B. C I. K K I........ ", ".... C I. K K...... "assign("....... B B makePair 11... B B strConss.. C B C. B B listAddFront.. S B S. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ")".... C B. C I. K K I........ ", ".... C B. C I. K K....... "apply("....... B B makePair 10... B B strConss.. C B C. B B listAddFront.. C B S. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ")".... C B. C I. K K I........ ", ".... C I. K K...... "abstract("....... B B makePair 3... B B strConss.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ")".... C B C. B B strJoin.. C B listMap. C I. K I....... ", "..... "list("....... B makePair 2.. B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")"... C I. K I..... "consts("....... B makePair 1.. B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")"... B strFromN. C I. K I...... "constn("....... B makePair 0.. B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")"... C I. K I..... "literal("....... "!!!unknown!!!"..
syntax_String_list = C B strJoin. C listMap. syntax_String... "; ".
token_Parse = B parseCharIf. C B isEQ. token_Type...
cstrSyntaxLiteral = parseBindOperation token_Parse 10.. B listReturn. B syntaxLiteral. C I. K I.....
cstrSyntaxConst = parseOption parseBindOperation token_Parse 11.. B listReturn. B syntaxConstS. C I. K I...... parseBindOperation token_Parse 12.. B listReturn. B syntaxConstN. C I. K I......
cstrSyntaxComment = parseBindOperation token_Parse 13.. K listEmpty..
cstrSyntaxAbstract = B parseBindOverride token_Parse 2... parseBind B B listReturn.. B syntaxAbstraction. C I. K I..... token_Parse 10...
cstrSyntaxAssignment = parseBind B B listReturn.. B syntaxAssignment. C I. K I..... parseBindDiscard token_Parse 10.. token_Parse 3...
cstrSyntaxNested = B parseBindOverride token_Parse 0... C B parseBindDiscard. C parseBindOperation. listReturn... token_Parse 1...
cstrSyntaxList = B parseBindOverride token_Parse 4... C B parseBindDiscard. C B parseBindOperation. S parseBind C listAddFront... B parseWhileSuccessful. parseBindOverride token_Parse 6...... B listReturn. syntaxList.... token_Parse 5...
cstrSyntaxSingle = B parseOptions. C B listAddFront. C B listAddFront. S B listAddFront. S B listAddFront. C B listAddFront. B listAddFront listEmpty.. cstrSyntaxList... cstrSyntaxComment... cstrSyntaxAbstract... cstrSyntaxNested... cstrSyntaxConst... cstrSyntaxLiteral..
cstrSyntaxApplication = C B parsePipe. B parseWhileSuccessful. cstrSyntaxSingle... B S C B IF. listIsEmpty.. parseFail.. B parseReturn. C S B foldl. listTail.. listHead.. syntaxApplication.... C listBind. I...
cstrSyntaxEverything = parseWhileSuccessful Y cstrSyntaxApplication..
syntax_Process = B parseAcceptFullyConsumed. cstrSyntaxEverything.
syntaxResultsToString = strFromMaybe C B strJoin. C listMap. B strFromN. syntax_Type.... ", "..
syntaxResultToString = strFromMaybe B strFromN. syntax_Type..
syntax_Run = B strFromMaybe I.. C B maybeMap. C B maybeBind. token_Process.. syntax_Process... syntax_String_list..
nativeLiteral = C C I. 0..
nativeConstN = C C I. 1..
nativeConstS = C C I. 2..
nativeApplication = B C. C C I. 10...
nativeAssignment = B C. C C I. 11...
native_VarCount = C C B IF. C isLT. 10... 1.. 2.
native_Type = getFirstConsumeMoreDeferred native_VarCount.
native_String = Y C B S. B S B S. B C B IF. C I. 0.... B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")"... C I. K I..... "literal("...... B S B S. B C B IF. C I. 1.... B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")"... B strFromN. C I. K I...... "constn("...... B S B S. B C B IF. C I. 2.... B strConss. C B listAddFront. B listAddFront listAddFront listEmpty. ")"... C I. K I..... "consts("...... S B S. B B S.. B B C B IF. C I. 10..... B B strConss.. C B C. B B listAddFront.. S B S. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ")".... C B. C I. K K I........ ", ".... C B. C I. K K....... "apply("...... C B C. B B C.. B B C B IF. C I. 11..... B B strConss.. C B C. B B listAddFront.. C B S. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ")".... C B. C I. K K I........ ", ".... C I. K K...... "assign("...... "!!!unknown!!!"....... B isEQ. native_Type...
native_String_list = C B strJoin. C listMap. native_String... "; ".
nativeI = nativeLiteral "I".
nativeK = nativeLiteral "K".
nativeB = nativeLiteral "B".
nativeC = nativeLiteral "C".
nativeS = nativeLiteral "S".
nativeListEmpty = nativeLiteral "listEmpty".
nativeListAddFront = nativeLiteral "listAddFront".
isNativeC = S B AND. B isEQ 0.. native_Type... B strEquals "C".. C I. K I....
nativeContainsLit = Y C B S. B B C.. B S B S. B B S.. B B C B IF. C I. 0..... B C strEquals.. C I. K I........ C B C. B B C.. B B B C... B B B C B IF. C I. 10...... S B S. B B S.. B B B OR... C B. C I. K K....... C B. C I. K K I.......... FALSE..... B isEQ. native_Type...
optimizeNative = Y C B C. B S B switchN. native_Type... C B S. B B listAddFront.. C B S. B B listAddFront.. C B S. B B listAddFront.. S B S. B B listAddFront.. B B listAddFront listEmpty... B B makePair 11... B S B nativeAssignment. C I. K K..... C B. C I. K K I.......... B B makePair 10... S B S. B B S B S. C B S. B B IF.. B B ANDs.. B C B listAddFront. S B listAddFront. B listAddFront listEmpty.. B isNativeC. C I. K K...... B isEQ 10.. native_Type..... isNativeC..... C I. K K I...... nativeApplication... C B. C I. K K...... C B. C I. K K I.......... makePair 2..... makePair 1..... makePair 0..... nativeI..
_syntaxToNative = Y C B C. B S B switchN. syntax_Type... C B S. B B listAddFront.. C B S. B B listAddFront.. C B S. B B listAddFront.. S B S. B B listAddFront.. S B S. B B listAddFront.. S B S. B B listAddFront.. B B listAddFront listEmpty... B B makePair 10... B S B Y C B S. B B S.. B B S B IF. C B isEQ. native_Type.. 10..... C B C. B B S.. C B C. B B S.. S B S. B B B.. B B S.. B B B S... B S B S. B B B.. B B IF.. C nativeContainsLit...... S B S. B B S.. B B B S... B S B B. B S. B B IF.. C nativeContainsLit...... S B S. B B C.. B B B B... B B B nativeApplication... B B nativeApplication nativeS........ I...... B B B nativeApplication... B B nativeApplication nativeC........... C B C. B B B.. B B C.. B B B C... B S B B. B S. B B IF.. C nativeContainsLit...... B B S B S. C B IF. B isEQ 0.. native_Type....... B C B B. B nativeApplication. nativeApplication nativeB............ nativeApplication nativeK...... C I. K K...... C I. K K I........ C B S. C B C. B B IF.. C nativeContainsLit.... nativeI... nativeApplication nativeK..... C I. K K..... C B. C I. K K I.......... B B makePair 12... B S B nativeAssignment. C I. K K..... C B. C I. K K I.......... B B makePair 11... S B S. B B nativeApplication.. C B. C I. K K...... C B. C I. K K I.......... B B makePair 3... B C C B foldr. C I. K I.... nativeListEmpty... C B B. B nativeApplication. nativeApplication nativeListAddFront.......... B makePair 2.. B nativeConstS. C I. K I........ B makePair 1.. B nativeConstN. C I. K I........ B makePair 0.. B nativeLiteral. C I. K I........ I..
syntaxToNative = B optimizeNative. _syntaxToNative.
nativeToExe = Y C B C. B S B switchN. native_Type... C B S. B B listAddFront.. C B S. B B listAddFront.. C B S. B B listAddFront.. S B S. B B listAddFront.. B B listAddFront listEmpty... B B makePair 11... B B strConss.. C B S. B B listAddFront.. C B C. B B listAddFront.. C B C. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listEmpty... C B. C I. K K I........ " ".... strReturn _eCharAssign..... " ".... C I. K K......... B B makePair 10... B B strConss.. S B S. B B listAddFront.. C B C. B B listAddFront.. B B listAddFront listAddFront listEmpty. ".".... C B. C I. K K I........ " ".... C B. C I. K K.......... B makePair 2.. C B strAddBack. C B strAddFront. C I. K I.... 34... 34...... B makePair 1.. B strFromN. C I. K I........ B makePair 0.. C I. K I....... "<UNKNOWN_NATIVE>"..
nativeToObj = Y C B S. B B C.. B B S B switchN. native_Type.... C B S. B B S.. B B B listAddFront... C B S. B B S.. B B B listAddFront... C B S. B B S.. B B B listAddFront... S B S. B B S.. B B B listAddFront... B B B listAddFront listEmpty.... B B B makePair 11.... B S B S. C B B. B B S makePair... C B C. B B S.. C B B. B C. B B IF.. strEquals.... maybeReturn....... C I. K K...... B B B fst... C B C. B B... C I. K K I............ B B B makePair 10.... C B S. B B C.. B B B makePair... S B S. B B S.. B B B fst... C B C. B B... C I. K K....... B B B fst... C B C. B B... C I. K K I.......... I....... B B makePair 2... C B makePair. C I. K I.......... B B makePair 1... C B makePair. C I. K I.......... B B makePair 0... S B C. B B makePair.. B B maybeGetValue.. C B. C I. K I....... I....... makePair I...
native_Run = B strFromMaybe I.. C B maybeMap. C B maybeMap. C B maybeBind. token_Process.. syntax_Process... C listMap. syntaxToNative.... native_String_list..
native_Process = B maybeReturn. C listMap. syntaxToNative..
nativeTemp = B maybeGetValue. C B maybeMap. C B maybeBind. token_Process.. syntax_Process... B fst. B nativeToObj I.. listHead....
eatAll = C B maybeMap. C B maybeBind. token_Process.. syntax_Process... C B strJoin. C listMap. B nativeToExe. syntaxToNative.... "; "..
run2 = B C B maybeMap. C B maybeBind. token_Process.. syntax_Process.... B B fst.. C B B. nativeToObj.. B syntaxToNative. listHead....
evalNumber = parseWithWhitespace parseNumber.
evalProduct = Y C B parseOption. B parseBind Mul. evalNumber.. parseBindOverride parseChar strHead "*"...... evalNumber..
evalSum = Y C B parseOption. B parseBind Add. evalProduct.. parseBindOverride parseChar strHead "+"...... evalProduct..
eval = B strFromN. C B maybeTryGetValue. B parseAcceptFullyConsumed. evalSum... 1337..
million = Mul 1000. 1000.
millionS = strFromN million.
testCount = 83
test0 = TRUE
test1 = I TRUE.
test2 = K TRUE. FALSE.
test3 = S K I.. I. TRUE.
test4 = NOT FALSE.
test5 = B NOT. NOT. TRUE.
test6 = OR TRUE. FALSE.
test7 = NOT OR FALSE. FALSE..
test8 = AND TRUE. TRUE.
test9 = NOT AND TRUE. FALSE..
test10 = IMPLIES FALSE. FALSE.
test11 = IMPLIES FALSE. TRUE.
test12 = IMPLIES TRUE. TRUE.
test13 = NOT IMPLIES TRUE. FALSE..
test14 = EQ FALSE. FALSE.
test15 = EQ TRUE. TRUE.
test16 = isZero 0.
test17 = NOT isZero 1..
test18 = isEQ 42. 42.
test19 = NOT isEQ 42. 43..
test20 = isEQ 1. Succ 0..
test21 = isEQ 43. Add 23. 20..
test22 = isEQ 69. Mul 3. 23..
test23 = isEQ 32. Pow 2. 5..
test24 = isEQ 31. Pred 32..
test25 = isEQ 65. Sub 101. 36..
test26 = isEQ 3. Div 63. 16..
test27 = isEQ 3. Mod 91. 4..
test28 = isLTE 3. 3.
test29 = isLTE 3. 4.
test30 = NOT isLTE 3. 2..
test31 = isGTE 4. 3.
test32 = isLT 3. 4.
test33 = NOT isLT 3. 3..
test34 = isGT 4. 3.
_test35f = makePair 45. 23.
test35 = isEQ 45. fst _test35f..
test36 = isEQ 23. snd _test35f..
_test37f = "Aa"
test37 = listIsNotEmpty _test37f.
test38 = NOT listIsEmpty _test37f..
test39 = isEQ 65. listHead _test37f..
test40 = isEQ 97. B listHead. listTail. _test37f..
_test41f = listAddFront listEmpty. 66.
test41 = isEQ 66. listHead _test41f..
test42 = isEQ 2. listCount _test37f..
test43 = isEQ 97. B listHead. reverse. _test37f..
test44 = isEQ 3. listCount listCons _test37f. _test41f...
test45 = isEQ 1. listCount listReturn 32...
test46 = isEQ 3. listCount listAddBack _test37f. 49...
test47 = strEquals _test37f. "Aa".
test48 = NOT strEquals _test37f. "AA"..
test49 = strEquals "asd". listTake "asdqwe". 3..
test50 = strEquals "asd". listTakeWhile "asdqwe". B NOT. C isEQ. listHead "q".....
test51 = strEquals "bte". listMap "asd". Succ..
test52 = strEquals "ade". listWhere "asdqwe". C isLTE. listHead "e"....
test53 = strEquals "qwe". listSkip "asdqwe". 3..
test54 = strEquals "qwe". listSkipWhile "asdqwe". B NOT. C isEQ. listHead "q".....
test55 = listAny "qwe". C isEQ. listHead "w"...
test56 = NOT listAny "asd". C isEQ. listHead "w"....
test57 = listAll "qwe". C isGT. 65..
test58 = NOT listAll "qwe". C isGT. 110...
test59 = strEquals "bte". listZip "asd". repeat 1.. Add..
test60 = isEQ 65. listElementAt "asdAqwe". 3..
test61 = isEQ 1. listHead Nats..
test62 = isEQ 0. listHead Nats0..
test63 = isEQ 0. listHead ByteVals..
test64 = isEQ 256. listCount ByteVals..
test65 = isEQ 435. Xor 123. 456..
test66 = isAlpha 65.
test67 = NOT isAlpha 64..
test68 = isNum listHead "0"..
test69 = NOT isNum listHead "a"...
test70 = isAlphaNum listHead "a"..
test71 = isAlphaNum listHead "0"..
test72 = NOT isAlphaNum listHead "!"...
test73 = isWhiteSpace listHead " "..
test74 = NOT isWhiteSpace listHead "a"...
test75 = isEQ 720. fak 6..
test76 = strEquals "23". strFromN 23..
test77 = strEquals "(12 ; 13)". strFromPair strFromN. strFromN. makePair 12. 13...
test78 = strEquals "(asd ; qwe)". strFromPair I. I. listCutAt "asdqwe". C isEQ. listHead "q".....
test79 = strContains "asd". listHead "s"..
test80 = NOT strContains "asd". listHead "w"...
test81 = strEquals "asd". strTrim "   asd   "..
test82 = TRUE
tfac1 = B snd. C makePair. 1..
tfac2 = K 1.
tval1 = tfac1 I.
tval2 = tfac2 I.
tswitch = C C switchN. listAddFront listAddFront listAddFront listAddFront listAddFront listEmpty. makePair 4. "e"... makePair 3. "d"... makePair 2. "c"... makePair 1. "b"... makePair 0. "a".... "x".
lengthyOp = C C B IF. B strIsEmpty. :... I.. I.
calledOften1 = lengthyOp
calledOften2 = C C lengthyOp..
scenario1 = B foldl listTake Nats. 5.. "0".. B B K.. B B calledOften1 "42"... strCons...
scenario2 = B foldl listTake Nats. 5.. "0".. B B K.. B B calledOften2 "42"... strCons...
