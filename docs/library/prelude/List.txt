List = ListEmpty | ListCons head tail

listIsEmpty = \list list True (\head \tail False)
listIsNotEmpty = b not listIsEmpty
head = \list list i (\head \tail head)
tail = \list list i (\head \tail tail)

foldl = \l \x \f l
            x
            (\head \tail foldl tail (f x head) f)
foldr = \l \x \f l
            x
            (\head \tail f (foldr tail x f) head)

reverseBag = \a \b a
            b
            (\head \tail reverseBag tail (ListCons head b))
reverse = \l reverseBag l ListEmpty
unfold = \x \f ListCons x (unfold (f x) f)
repeat = \elem unfold elem i

listConcat = \l \k l k $ \h \t ListCons h $ listConcat t k
    
listReturn = \x [x]
listAddBack = \l \x listConcat l [x]

cfold = \l \x \f ListCons x (l ListEmpty (\head \tail cfold tail (f x head) f))

take = \n \l
    l
        []
        (\head \tail n 
            []
            (\dn ListCons head (take dn tail))
        )

takeWhile = \p \l 
    l
        []
        (\head \tail
            if(not (p head))
                []
                (ListCons head $ takeWhile p tail)
        )

replicate = \n \x take n $ repeat x
listBind = \f \l foldl l [] (\a \b listConcat a (f b))
map = \f \l l [] $ \h \t ListCons (f h) $ map f t
filter = \f \l l [] $ \head \tail if (f head) (ListCons head) i $ filter f tail
drop = \n \l l [] $ \head \tail n l (\n drop n tail)
dropWhile = \p \l
    l
        []
        (\head \tail 
            if(not (p head))
                l
                (dropWhile p tail)
        )
any = \f \l not $ listIsEmpty $ filter f l
all = \f \l not $ any (b not f) l
or = any i
and = all i

length = \l foldl l Zero (b k Succ)

zipWith = \op \l1 \l2 
    l1
        ListEmpty
        (\h1 \t1
            l2
                ListEmpty
                (\h2 \t2
                    ListCons 
                        (op h1 h2)
                        (zipWith op t1 t2) 
                )
        )
zip = zipWith Pair

listZipLonger = \l1 \l2 \pad \op 
    l1
        (map (\item2 op pad item2) l2)
        (\h1 \t1
            l2
                (map (\item1 op item1 pad) l1)
                (\h2 \t2
                    ListCons 
                        (op h1 h2)
                        (listZipLonger t1 t2 pad op) 
                )
        )
listEquals = \eq \l1 \l2 lAnd (isEQ (length l1) (length l2)) (and $ zipWith eq l1 l2)
listMerge = \lt \l1 \l2
    l1
        l2
        (\h1 \t1
            l2
                l1
                (\h2 \t2
                    if (l1 h1 h2)
                        (ListCons h1 $ listMerge lt t1 l2)
                        (ListCons h2 $ listMerge lt l1 h2)
                )
        )

listSort = y(\sort \lt \l if(isGT (length l) one) ((\mid listMerge lt (sort lt (take mid l))  (sort lt (drop mid l))) (div (length l) two)) l)

intSort = listSort isLT

listElementAt = \l \n head $ drop n l

listStartsWith = \eq \l1 \l2 listEquals eq (take (length l2) l1) l2

listJoin = \lists \sepa lists
    ListEmpty 
    (\head \tail foldl tail head (\cur \new listConcat (listConcat cur sepa) new))