Intro
~~
' LambAda is a lightweight language based entirely on Combinatory Logic
' (the single combinator "Iota" to be precise).
' Beyond that, no concepts or data types are built-in, but instead desugared into CL.

oneHundred = pow 10 2
add 42 oneHundred ' last expression => will be the output of this program


~~~
Lambdas
~~
' LambAda desugars lambdas using combinators S, K, I, B, C and Y.
' The syntax is very compact: There is no function arrow or period
' as commonly used in lambda calculus or other languages.

identity = \x x   ' would be something like "x => x" or "\x -> x" in other languages

repeat = \x \n n ListEmpty (\n ListCons x (repeat x n))
' This recursive definition will become something like
repeat = b y (b (b (c (c i ListEmpty))) (b b ListCons))

repeat 65 10

~~~
Algebraic Data Types
~~
' LambAda desugars algebraic data types into functions that follow Scott-encoding.
Maybe = Nothing | Just x
' This will emit constructors equivalent to
'   Nothing = \a \b a
'   Just = \x \a \b b x
' and helper functions for extraction
'   Nothing_Dispatch = \onmatch \alt \m m onmatch alt
'   Just_Dispatch    = \onmatch \alt \m m alt onmatch

' Playground
m1 = Nothing
m2 = Just 42
strConss [
    Just_Dispatch strFromN "m1 has no value" m1,
    newLine,
    Just_Dispatch strFromN "m2 has no value" m2
  ]

~~~
Predefined Data Types
~~
' The LambAda prelude defines the following AGTs:
'   Bool = True | False
'   Nat = Zero | Succ n
'   Pair = Pair l r
'   List = ListEmpty | ListCons x l
'   Maybe = Nothing | Just x

' Special syntax for natural numbers, lists and strings
' (which are lists of natural numbers) are desugared using these constructors.

' So here are 5 ways to represent the string "AB" with less and less sugar.
strJoin [
    "AB",
    [65, 66],
    (\n [n, Succ n]) (Succ $ pow 2 6),
    (\n [n, Succ n]) (Succ $ pow (Succ $ Succ Zero) (Succ $ Succ $ Succ $ Succ $ Succ $ Succ Zero)),
    (\n ListCons n $ ListCons (Succ n) ListEmpty) (Succ $ pow (Succ $ Succ Zero) (Succ $ Succ $ Succ $ Succ $ Succ $ Succ Zero))
  ]
  newLine


~~~
APIs
~~
' Since the LambAda compiler is written in LambAda, there are countless APIs.
' Check out the "Samples" and use auto-completion to discover APIs.
' Example using "filter" and natural number comparison.

filter
  (isLT 96)      ' == is character value > 96
  "Hello World"

~~~
Compiler
~~
' The LambAda compiler is in scope as well and can be played with.
' For instance, to inspect the output of every compilation stage:
fullDebug "truth = foldl [21, 21] 0 add"
