' NATIVE => S
nativeExprToExe = \n n
            (\literal strConss [literal, " "])
            (\o1 \o2 (strConss [nativeExprToExe o1, nativeExprToExe o2, " "]))
nativeDefToExe = \n n (\literal \o (strConss [nativeExprToExe o, literal, [10]]))

' ENV => NATIVE => (???, ENV)
nativeToObj = y $ \this \env \n n
        (\literal Pair (maybeGetValue (env literal)) env) 'handle errors
        (\o1 \o2  Pair ((fst (this env o1)) (fst (this env o2))) env)


' S => S
native_Run = \s strFromMaybe i $ maybeMap
                                    (maybeMap (maybeBind (token_Process s) syntax_Process) (listBind syntaxToNative))
                                    (\ns strJoin (map nativeDefToExe ns) "; ")
                                    ' native_String_list

' [NATIVE] => S
output_Process = \natives strConss $ map nativeDefToExe natives

' [NATIVE] => S
output_ProcessType = \natives strConss $ map (b nativeDefToExe nativeDefToTypeNative) natives
