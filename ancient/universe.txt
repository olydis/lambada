u = <U>
write = <Write>
writeLine = <WriteLine>
readLine = <IOReturnValue>
ioBind = <IOBind>
ioReturn = <IOReturn>
msgBox = <Hook>
s = <S>
k = <K>
i = <I>
b = <B>
c = <C>
y = <Y>
isZero = <IsZero>
Zero = <NatNumber>
one = <NatNumber>
Succ = <Succ>
pred = <Pred>
add = <Add>
mul = <Mul>
pow = <Pow>
sub = <Sub>
mod = <Mod>
div = <Div>
xor = <Xor>
fst = <Fst>
snd = <Snd>
makePair = <MakePair>
true = <Bool>
false = <Bool>
not = <Not>
and = <And>
or = <Or>
strEmpty = <StringX>
strIsEmpty = <StringIsEmpty>
strSkip = <StringSkip>
strTake = <StringSkip>
strHead = <StringHead>
strTail = <StringTail>
strAddFront = <StringAddFront>
strAddBack = <StringAddBack>
strCons = <StringCons>
strCutAt = <StringCutAt>
strEquals = <StringEquals>
strFromN = <StrFromN>
strToN = <StrToN>
strWhere = <StringWhere>
strStartsWith = <Hook>
isEQ = <Hook>
isLT = <Hook>
isGT = <Hook>
isLTE = <Hook>
isGTE = <Hook>
m = <S2>
True = <K>
True_Dispatch = <B2>
False = <K1>
False_Dispatch = <C1>
Bool_ID = <C2>
if = <I>
implies = <C2>
eq = <B2>
Zero_Dispatch = <C2>
Succ_Dispatch = <C1>
Nat_ID = <C2>
Pair = <B2>
Pair_Dispatch = <B2>
Pair_ID = <C2>
changeFst = <C2>
changeSnd = <C2>
min = <C2>
max = <C2>
ListEmpty = <K>
ListEmpty_Dispatch = <C2>
ListCons = <B2>
ListCons_Dispatch = <C1>
List_ID = <C2>
listAddFront = <C1>
listIsEmpty = <C2>
listIsNotEmpty = <B2>
listHead = <C2>
listTail = <C2>
foldl = <C2>
foldr = <C2>
reverseBag = <C2>
reverse = <C2>
unfold = <S2>
repeat = <C2>
listConcat = <C2>
listReturn = <C2>
listAddBack = <C2>
cfold = <B2>
listTake = <C2>
listTakeWhile = <C2>
listBind = <C2>
listMap = <C2>
listWhere = <C2>
listSkip = <S2>
listSkipWhile = <S2>
listAny = <B2>
listAll = <B2>
ors = <C2>
ands = <C2>
listCount = <C2>
listZip = <C2>
listZipLonger = <S2>
listEquals = <B2>
listMerge = <B2>
listSort = <C2>
intSort = <S2>
listElementAt = <B2>
listStartsWith = <C2>
strIsNotEmpty = <B2>
straddFront = <C1>
straddBack = <C2>
strReturn = <C2>
strLength = <C2>
listJoin = <C2>
strJoin = <S2>
strConss = <C2>
LabeledVertex = <B2>
LabeledVertex_Dispatch = <B2>
LabeledTree_ID = <C2>
LabeledBinLeaf = <B2>
LabeledBinLeaf_Dispatch = <C2>
LabeledBinVertex = <B2>
LabeledBinVertex_Dispatch = <C1>
LabeledBinTree_ID = <C2>
LabeledOrderedBinLeaf = <B2>
LabeledOrderedBinLeaf_Dispatch = <C2>
LabeledOrderedBinVertex = <B2>
LabeledOrderedBinVertex_Dispatch = <C1>
LabeledOrderedBinTree_ID = <C2>
RBTreeLeaf = <B2>
RBTreeLeaf_Dispatch = <C2>
RBTreeNodeRed = <B2>
RBTreeNodeRed_Dispatch = <C2>
RBTreeNodeBlack = <B2>
RBTreeNodeBlack_Dispatch = <C1>
RBTree_ID = <C2>
nats0 = <K1>
nats = <K1>
zeroes = <K1>
byteVals = <K1>
toBinSeq = <C2>
fromBinSeq = <C2>
isUpperCaseLetter = <S2>
isLowerCaseLetter = <S2>
isAlpha = <S2>
alpha = <StringX>
isNum = <S2>
num = <StringX>
isAlphaNum = <S2>
isWhiteSpace = <C2>
whiteSpace = <StringX>
newLine = <K1>
toUpperCaseLetter = <S2>
toLowerCaseLetter = <S2>
toUpperCaseString = <C2>
toUpperCaseFirstLetter = <S2>
toLowerCaseFirstLetter = <S2>
halt = <S2>
fak = <C2>
_nextCandids = <B2>
_primes = <S2>
primes = <K1>
fibs = <K1>
xstrFromNat = <S2>
strFromNs = <C2>
strFromB = <C2>
strFromS = <B2>
strFromPair = <B2>
listCutAt = <S2>
strFromSS = <C2>
xlistSplitAt = <C2>
listSplitAt = <C2>
listContains = <C2>
strContains = <C2>
listRepeat = <C2>
strBurst = <C2>
strTrim = <B2>
Just = <B2>
Just_Dispatch = <B2>
Nothing = <K1>
Nothing_Dispatch = <C1>
Maybe_ID = <C2>
maybeReturn = <B2>
maybeNothing = <K1>
maybeHasValue = <C2>
maybeGetValue = <C2>
maybeBind = <C2>
maybeMap = <C2>
maybeAlternative = <S2>
maybeTryGetValue = <C2>
strFromMaybe = <C2>
ParseResultFail = <K>
ParseResultFail_Dispatch = <C2>
ParseResult = <B2>
ParseResult_Dispatch = <C1>
ParseResult_ID = <C2>
parseReturn = <C1>
parseFail = <K1>
parseOperation = <B2>
parseBindOperation = <C1>
parsePipe = <C2>
parseBind = <B2>
parseBindDiscard = <C2>
parseBindOverride = <C2>
parseBindPair = <C2>
parseCharIf = <C2>
parseCharX = <B2>
parseChar = <B2>
parseSingle = <S2>
parseString = <C2>
parseUntil = <B2>
parseWhile = <B2>
parseWhileMinOne = <B2>
parseOption = <C2>
parseOptions = <C2>
parseWhitespace = <B2>
parseWithWhitespace = <C2>
parseToken = <C2>
parsenumber = <B2>
parseAccept = <B2>
parseAcceptAll = <C2>
parseAcceptFullyConsumed = <C2>
parseWhilesuccessful = <S2>
mapCreate = <C2>
mapGetAll = <S2>
mapHasKey = <C2>
mapCount = <B2>
mapadd = <C2>
mapRemove = <S2>
mapSet = <C2>
mapGet = <B2>
idfCreate = <C2>
idfHandle = <S2>
idfHandleX = <C2>
idfCount = <B2>
listDistinct = <B2>
empty = <K1>
diff = <S2>
gDrawL = <C2>
gDraw = <B2>
gCanvas = <K1>
gOverlay = <B2>
gPixel = <B2>
gCircle = <B2>
beanEmpty = <K1>
beanSet = <C1>
beanTryGet = <I>
beanGet = <B1>
beanHas = <B1>
seqEmpty = <C2>
seqLength = <Fst>
seqGet = <Snd>
seqSet = <C2>
seqaddFront = <S2>
seqaddBack = <S2>
seqConcat = <S2>
seqRangeUnsafe = <B2>
seqRange = <S2>
seqToList = <S2>
listToSeq = <C2>
listHeadOrDefault = <S2>
_switchCond = <C2>
switchCond = <C1>
switch = <B2>
switchN = <C2>
getFirstConsumeMoreDeferred = <B2>
getFirstConsumeMore = <B2>
_eCharBrOpen = <NatNumber>
_eCharBrClose = <NatNumber>
_eCharSqBrOpen = <NatNumber>
_eCharSqBrClose = <NatNumber>
_eCharComma = <NatNumber>
_eCharAbstr = <NatNumber>
_eCharOr = <NatNumber>
_eCharAnd = <NatNumber>
_eCharAssign = <NatNumber>
_eCharComment = <NatNumber>
_eStrColon = <K1>
_eIsQuot = <S2>
_eIsNewLine = <S2>
ScharParenOpen = <B2>
ScharParenOpen_Dispatch = <C2>
ScharParenClose = <K1>
ScharParenClose_Dispatch = <C2>
ScharAbstraction = <K1>
ScharAbstraction_Dispatch = <C2>
ScharAssign = <K1>
ScharAssign_Dispatch = <C2>
ScharSqBracketOpen = <K1>
ScharSqBracketOpen_Dispatch = <C2>
ScharSqBracketClose = <K1>
ScharSqBracketClose_Dispatch = <C2>
ScharComma = <K1>
ScharComma_Dispatch = <C2>
ScharSingleOr = <K1>
ScharSingleOr_Dispatch = <C1>
Schar_ID = <C2>
scharEQ = <C2>
schar_String = <C2>
TokenSpecialChar = <B2>
TokenSpecialChar_Dispatch = <C2>
TokenLiteralLower = <B2>
TokenLiteralLower_Dispatch = <C2>
TokenLiteralUpper = <B2>
TokenLiteralUpper_Dispatch = <C2>
TokenConstS = <B2>
TokenConstS_Dispatch = <C2>
TokenConstN = <B2>
TokenConstN_Dispatch = <C2>
TokenComment = <B2>
TokenComment_Dispatch = <C1>
Token_ID = <C2>
tokenLiteral = <S2>
token_String = <C2>
token_String_list = <C2>
eatParenOpen = <B2>
eatParenClose = <B2>
eatSqBracketOpen = <B2>
eatSqBracketClose = <B2>
eatComma = <B2>
eatAbstraction = <B2>
eatAssign = <B2>
eatSingleOr = <B2>
eatLiteral = <B2>
eatConstS = <B2>
eatConstN = <B2>
eatComment = <B2>
eatSpecialChar = <B2>
eatSomething = <C2>
token_Process = <B2>
token_Run = <B2>
SyntaxName = <B2>
SyntaxName_Dispatch = <C2>
SyntaxConstN = <B2>
SyntaxConstN_Dispatch = <C2>
SyntaxConstS = <B2>
SyntaxConstS_Dispatch = <C2>
SyntaxList = <B2>
SyntaxList_Dispatch = <C2>
SyntaxAbstraction = <B2>
SyntaxAbstraction_Dispatch = <C2>
SyntaxApplication = <B2>
SyntaxApplication_Dispatch = <C2>
SyntaxAssignment = <B2>
SyntaxAssignment_Dispatch = <C2>
SyntaxType = <B2>
SyntaxType_Dispatch = <C1>
SyntaxExpression_ID = <C2>
syntaxCreateApplication = <C2>
syntaxCreateAbstraction = <C2>
syntax_String = <C2>
syntax_String_list = <C2>
cstrParseAbstractionTail = <B2>
cstrParseSChar = <B2>
cstrParseLiteralL = <C2>
cstrParseLiteralU = <C2>
cstrParseCloseParen = <C2>
cstrParseCloseSqBr = <C2>
cstrParseComma = <C2>
cstrParseAssign = <C2>
cstrParseSingleOr = <C2>
cstrParseListTail = <C2>
cstrParseAssignTail = <B2>
cstrParseDataDefOption = <C2>
cstrParseDataDefTail2 = <C2>
cstrParseDataDefTail = <B2>
cstrSyntaxSingle = <B2>
cstrSyntaxApplication = <C2>
cstrSyntaxEverything = <C2>
syntax_Process = <B2>
syntax_Run = <B2>
NativeAssignment = <B2>
NativeAssignment_Dispatch = <B2>
NativeDefinition_ID = <C2>
NativeLiteral = <B2>
NativeLiteral_Dispatch = <C2>
NativeConstN = <B2>
NativeConstN_Dispatch = <C2>
NativeConstS = <B2>
NativeConstS_Dispatch = <C2>
NativeApplication = <B2>
NativeApplication_Dispatch = <C1>
NativeExpression_ID = <C2>
getCollisionFreeLiteral = <StringCons1>
nativeExpr_String = <C2>
nativeDef_String = <C2>
nativeDef_String_list = <C2>
nativeExpr_String_list = <C2>
nativeI = <B2>
nativeK = <B2>
nativeB = <B2>
nativeC = <B2>
nativeS = <B2>
nativeY = <B2>
nativeListEmpty = <B2>
nativeListCons = <B2>
isNativeLiteral = <C2>
nativeContainsLit = <C2>
finalizeLiteral = <S2>
finalizeNativeExpr = <C2>
finalizeNativeDefs = <C2>
_syntaxToNative = <C2>
_createUniqueNameFromN = <B2>
_createUniqueNameFromS = <StringCons1>
_syntaxEmitTypeInstance = <B2>
_syntaxEmitTypeStuff = <B2>
_syntaxToNativeDefs = <C2>
syntaxToNative = <C2>
nativeExprToExe = <C2>
nativeDefToExe = <B2>
nativeToObj = <S2>
native_Run = <B2>
native_Process = <B2>
output_Process = <B2>
pipe = <C2>
fullDebug = <B2>
run2 = <B2>
evalnumber = <C2>
evalProduct = <C2>
evalSum = <C2>
eval = <B2>
million = <NatNumber>
millionS = <StringX>
testCount = <NatNumber>
test0 = <K>
test1 = <K>
test2 = <K>
test3 = <K>
test4 = <Bool>
test5 = <Bool>
test6 = <Bool>
test7 = <Bool>
test8 = <Bool>
test9 = <Bool>
test10 = <K>
test11 = <K>
test12 = <K>
test13 = <Bool>
test14 = <Bool>
test15 = <Bool>
test16 = <Bool>
test17 = <Bool>
test18 = <Bool>
test19 = <Bool>
test20 = <Bool>
test21 = <Bool>
test22 = <Bool>
test23 = <Bool>
test24 = <Bool>
test25 = <Bool>
test26 = <Bool>
test27 = <Bool>
test28 = <Bool>
test29 = <Bool>
test30 = <Bool>
test31 = <Bool>
test32 = <Bool>
test33 = <Bool>
test34 = <Bool>
_test35f = <C2>
test35 = <Bool>
test36 = <Bool>
_test37f = <StringX>
test37 = <Bool>
test38 = <Bool>
test39 = <Bool>
test40 = <Bool>
_test41f = <K1>
test41 = <Bool>
test42 = <Bool>
test43 = <Bool>
test44 = <Bool>
test45 = <Bool>
test46 = <Bool>
test47 = <Bool>
test48 = <Bool>
test49 = <Bool>
test50 = <Bool>
test51 = <Bool>
test52 = <Bool>
test53 = <Bool>
test54 = <Bool>
test55 = <Bool>
test56 = <Bool>
test57 = <Bool>
test58 = <Bool>
test59 = <Bool>
test60 = <Bool>
test61 = <Bool>
test62 = <Bool>
test63 = <Bool>
test64 = <Bool>
test65 = <Bool>
test66 = <Bool>
test67 = <Bool>
test68 = <Bool>
test69 = <Bool>
test70 = <Bool>
test71 = <Bool>
test72 = <Bool>
test73 = <Bool>
test74 = <Bool>
test75 = <Bool>
test76 = <Bool>
test77 = <Bool>
test78 = <Bool>
test79 = <Bool>
test80 = <Bool>
test81 = <Bool>
test82 = <K>
tfac1 = <B2>
tfac2 = <K1>
tval1 = <NatNumber>
tval2 = <NatNumber>
tswitch = <C2>
lengthyOp = <C2>
calledOften1 = <C2>
calledOften2 = <C1>
scenario1 = <B2>
scenario2 = <B2>
ioRun = <B2>
