'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' lambAda stage0 (the extra "A" is for extra awesomeness) '
'                                                         '
' Last changed: 24.04.2012         Author: Johannes Bader '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' define SKI in terms of U to enable abstraction killing 
' for systems implementing ONLY U (how romantic!)
I = U U.
K = U U I..     ' <- where U and I first met
S = U K.
B = S K S.. K.
C = S S K S K S.. K... S.. K K..

' few more combinators
M = S I. I.

' fixed point
Y = B M. C B B. I.. S I. I...


' bool
TRUE = K
FALSE = K I.
IF = I
NOT = C C I. FALSE.. TRUE.

AND = C B C. C B B. I.. I... FALSE.
OR = C B B. C I. TRUE... I.

' numbers (N_0)
Succ = S B.
zero = K I.
one = Succ zero.

Apply = I

Add = S I. K S B...
Mul = B
Pow = S K S S S K..... K.

isZero = C C I. K FALSE... TRUE.



''' higher order types

' pair
makePair = C B B. B C. B C I.. I.... I.
fst = C I. B K. I..
snd = C I. K I..
changeFst = S B C. B B makePair.. B C I.. B fst. I..... B snd. I..
changeSnd = S B B. B makePair. B fst. I.... B C I.. B snd. I...

' NUMBERS PART 2
Pred = B B B snd... C B C. B B B.. C B B. I.. B B makePair FALSE... C B S. B C C B IF. B fst. I... I... I... B snd. I....... B makePair TRUE.. I...
Sub = Y B S B S. B C B IF. B isZero. I.... I.... C B C. B B B.. C B B. I.. B Pred. I..... B Pred. I....

isEQ = S B S. B B AND.. B B isZero.. C B B. B Sub. I... I..... B B isZero.. B C B Sub. I... I...
isLTE = B B isZero.. C B B. B Sub. I... I..
isGTE = B C B isLTE. I... I.
isLT = B B NOT.. C B B. B isGTE. I... I..
isGT = B B NOT.. C B B. B isLTE. I... I..

Mod = Y B S B S. S B C. B B IF.. C B B. B isLT. I... I.... I.... C B C. B B S.. C B B. B B. I... C B B. B Sub. I... I..... I...
Div = Y B S B S. C B C. B B IF.. C B B. B isLT. I... I.... zero.... B B B Succ... C B C. B B S.. C B B. B B. I... C B B. B Sub. I... I..... I....

' list
listIsEmpty = B NOT. fst.
listIsNotEmpty = fst

listHead = B fst. snd.
listTail = B snd. snd.

listEmpty = makePair FALSE. I.
listAddFront = B B makePair TRUE... B C B makePair. I... I..

foldl = Y C B C. B B S.. B B B C... B S B B. B B. B IF. B listIsNotEmpty. I...... C B C. B B C.. B B B S... C B S. B B B.. B B B.. C B B. I.. B listTail. I...... B C B C. B C I.. I.... B listHead. I....... I...... I..
reverseBag = Y C B C. B B S.. B S B B. B IF. B listIsNotEmpty. I..... C B S. B B B.. C B B. I.. B listTail. I..... B C B listAddFront. I... B listHead. I....... I..
reverse = C B reverseBag. I.. listEmpty.
foldr = Y C B C. B B S.. B B B C... B S B B. B B. B IF. B listIsNotEmpty. I...... C B S. B B C.. B B B C... B B B S I.... C B C. B B C.. B B B B... C B C. B B B.. C B B. I.. B listTail. I..... I..... I...... B listHead. I....... I..
unfold = Y B B B C C I. TRUE..... B S B B. B makePair. I.... C B C. B B S.. C B B. B B. I... B C I.. I..... I....
repeat = C B unfold. I.. I.

listCons = C B C. C B B. B foldr. I... I... listAddFront.
    
listReturn = listAddFront listEmpty.
listAddBack = C B B. B listCons. I... B listReturn. I..

listTake = Y B S B S. C B C. B B IF.. B C B OR. B isZero. I.... B listIsEmpty. I..... listEmpty.... C B S. B B C.. B B B listAddFront... C B C. B B B.. C B B. I.. B listTail. I..... B Pred. I...... B listHead. I....
listTakeWhile = Y B S B S. C B C. B B IF.. S B B. B OR. B listIsEmpty. I.... B B NOT.. B C I.. B listHead. I....... listEmpty.... C B S. B B C.. B B B listAddFront... C B C. B B B.. C B B. I.. B listTail. I..... I..... B listHead. I....

listBind = C B B. C B foldr. I.. listEmpty... C B B. B C. B B listCons.. C B B. I.. I..... I..
listMap = C B B. B listBind. I... B B listReturn.. I..
listWhere = C B B. B listBind. I... C B C. C B S. B B IF.. C B B. I.. I.... B listReturn. I.... listEmpty..
listSkip = Y B S B S. S B C. B B IF.. B C B OR. B isZero. I.... B listIsEmpty. I..... I.... C B C. B B B.. C B B. I.. B listTail. I..... B Pred. I....
listSkipWhile = Y C B S. B B C.. B S B S. B B IF.. S B C. B B AND.. B C I.. B listHead. I..... B NOT. B listIsEmpty. I....... C B C. B B B.. C B B. I.. B listTail. I..... I..... I..

listAny = B B NOT.. B B listIsEmpty.. C B B. B listWhere. I... I...
listAll = B B NOT.. C B B. B listAny. I... B B NOT.. I...

listCount = C C B foldl. I.. zero.. B K. Succ..

listZip = Y B S B S. B B B.. C B C. B B IF.. C B B. B OR. B listIsEmpty. I.... B listIsEmpty. I..... listEmpty..... C B S. B B S.. B B B S... B B B B listAddFront.... C B C. B B C.. B B B B... C B C. B B B.. C B B. I.. B listTail. I..... B listTail. I...... I...... C B B. B C. B C I.. B listHead. I..... B listHead. I.....
listZipLonger = Y B S B S. B B S.. B B B S... S B S. B B B.. B B B.. B B IF.. C B B. B OR. B listIsEmpty. I.... B listIsEmpty. I....... S B C. B B S.. B B B S... C B B. B B. B B. B IF. B listIsEmpty. I...... C B C. B B B.. B C B listZip. B repeat. I.... I.... I...... C B C. B B B.. C B B. B listZip. I... B repeat. I..... I........ C B S. B B S.. B B B C... B B B B S.... B B B B B listAddFront..... C B C. B B C.. B B B C... B B B B B.... C B C. B B C.. B B B B... C B C. B B B.. C B B. I.. B listTail. I..... B listTail. I...... I...... I....... C B B. B C. B C I.. B listHead. I..... B listHead. I.....
listEquals = B S B S. B B AND.. C B B. B isEQ. B listCount. I.... B listCount. I...... C B C. B B C.. B B B listAll... B C B C. C B B. B listZip. I... I.... I..... I..
strEquals = listEquals isEQ.

listElementAt = B B listHead.. C B B. B listSkip. I... I..

' recursive functions
Nats0 = unfold zero. Succ.
Nats = unfold one. Succ.
zeroes = repeat 0.
ByteVals = listTake Nats0. 256.

isAlpha = S B OR. S B AND. C B isGT. I.. 64... C B isLT. I.. 91.... S B AND. C B isGT. I.. 96... C B isLT. I.. 123...
Alpha = listWhere ByteVals. isAlpha.
isNum = S B AND. C B isGT. I.. 47... C B isLT. I.. 58..
Num = listWhere ByteVals. isNum.
isAlphaNum = S B OR. B isAlpha. I... B isNum. I..
AlphaNum = listCons Alpha. Num.
isWhiteSpace = C B isLT. I.. 34.
WhiteSpace = listWhere ByteVals. isWhiteSpace.
NewLine = listAddFront listReturn 10.. 13.


' formatters
_strFromNat = Y B S C B IF. B isZero. I... listEmpty... C B S. B B listAddBack.. C B B. I.. C B Div. I.. 10..... B Add Mul 6. 8... C B Mod. I.. 10.....
strFromN = S C B IF. B isZero. I... listReturn Mul 6. 8.... B _strFromNat. I..
strToN = C C B foldl. I.. 0.. C B B. B Add. C B Mul. I.. 10.... C B Sub. I.. Mul 6. 8....
strFromB = C C B IF. I.. "TRUE".. "FALSE".


' additional jogus stuff
listPump = S B makePair. S B listAddBack. B fst. I... B listHead. B snd. I..... B listTail. B snd. I...
listPumpUntil = Y B S B S. S B C. B B IF.. S B C. B B OR.. B C I.. B listHead. B snd. I...... B listIsEmpty. B snd. I...... I.... C B C. B B B.. C B B. I.. B listPump. I..... I...
listCutAt = C B B. B listPumpUntil. B makePair listEmpty.. I.... I.

_listSplitAt = C B B. B unfold. C B listCutAt. I.. K TRUE..... C B C. B B changeSnd.. B C B listCutAt. B snd. I.... I.... C B listSkip. I.. one...
listSplitAt = C B C. B B listBind.. C B C. B B listCutAt.. C B C. B B listSkip.. C B B. B _listSplitAt. I... I.... one.... B listIsEmpty. B snd. I...... B listReturn. B snd. I...

strTrim = B reverse. C B listSkipWhile. B reverse. C B listSkipWhile. I.. isWhiteSpace.... isWhiteSpace..

' maybe
maybeReturn = makePair TRUE.
maybeNothing = makePair FALSE. I.
maybeHasValue = fst
maybeGetValue = snd
maybeBind = C B C. S B B. B IF. B maybeHasValue. I.... B C I.. B maybeGetValue. I..... maybeNothing.
maybeMap = C B B. B maybeBind. I... B B maybeReturn.. I..
maybeAlternative = C B B. S B IF. B maybeHasValue. I... I... I.
maybeTryGetValue = B B maybeGetValue.. C B B. B maybeAlternative. I... B maybeReturn. I...


' parser stuff
parseReturn = B B maybeReturn.. B C B makePair. I... I..
parseFail = K maybeNothing.
parseOperation = B C B maybeMap. I... B C B changeSnd. I... I..
parseBindOperation = B C B B. B parseOperation. I.... C B B. I.. I..
parsePipe = C B B. B C. B B maybeBind.. C B B. I.. I..... C B S. C B B. I.. B snd. I.... B fst. I...
parseBind = B C B B. B C. B B maybeBind.. C B B. I.. I...... C B B. B S. B B parseOperation.. C B B. I.. B snd. I...... C B B. I.. B fst. I....
parseBindDiscard = parseBind K.
parseBindOverride = parseBind K I..
parseBindPair = parseBind makePair.

parseCharIf = C B S. C B S. B B IF.. B S B AND. B NOT. B listIsEmpty. I..... C B B. I.. B listHead. I...... S B parseReturn. B listHead. I... B listTail. I..... B parseFail. I..
parseChar = B parseCharIf. B isEQ. I..
parseString = C C B foldl. C B listMap. I.. parseChar... parseReturn listEmpty... parseBind listAddBack..
parseWhile = B B S B parseReturn. B fst. I... B snd. I.... B C B listCutAt. I... B B NOT.. I...
parseWhileMinOne = B S C B S. B C B IF. B listIsEmpty. B snd. B maybeGetValue. I...... B parseFail. I.... I... C B B. B parseWhile. I... I..

parseOption = C B B. B S. B B maybeAlternative.. C B B. I.. I..... C B B. I.. I..

parseWhitespace = parseWhile isWhiteSpace.
parseWithWhitespace = C B parseBindDiscard. B parseBindOverride parseWhitespace.. I... parseWhitespace.
parseToken = parseBind B C B listAddFront. I... I.. parseCharIf isAlpha.. parseWhile isAlphaNum..
parseNumber = parseBindOperation parseWhileMinOne isNum.. strToN.

parseAccept = B C B maybeBind. I... C B C. C B S. B B IF.. C B B. I.. B fst. I..... B maybeReturn. B snd. I..... maybeNothing..
parseAcceptAll = parseAccept K TRUE..
parseAcceptFullyConsumed = parseAccept listIsEmpty.

' bootstrap
makeDeferred = makePair 0.
makePrimitive = makePair 1.
makeApplication = B B makePair 2... C B B. B makePair. I... I..
redBindInit = K maybeNothing.
reduce = B Y. C B B. B S. B S B IF. C B isEQ. B fst. I... 0.... C B B. I.. B snd. I...... B S S B IF. C B isEQ. B fst. I... 1... B maybeReturn. B snd. I..... S B S. B B maybeBind.. C B B. I.. B fst. B snd. I...... C B C. B B B.. B B maybeMap.. C B B. I.. B snd. B snd. I....... C B B. I.. I......

_eCharBrClose = listHead ")".
_eCharBrOpen = listHead "(".
_eCharAbstr = listHead "\".
_eCharAssign = listHead "=".
_eCharComment = 39
_eStrColon = listReturn 58.
_eIsQuot = S B OR. C B isEQ. I.. 34... C B isEQ. I.. 96..
' N => S => M (P S N)
execReadChar = B parseWithWhitespace. parseChar.
' x => N => S => M (P S x)
execChar = B C B parseBindOverride. B execReadChar. I.... B parseReturn. I..

' lit. tokens:
' S => M (P S EXPR)
execToken = parseBindOperation parseWithWhitespace parseOption parseToken. parseString _eStrColon.... makeDeferred.
' S => M (P S EXPR)
execNum = parseBindOperation parseWithWhitespace parseNumber.. makePrimitive.
' S => M (P S EXPR)
execString = parseBindOperation parseWithWhitespace parseBindDiscard parseBindOverride parseCharIf _eIsQuot.. parseWhile B NOT. _eIsQuot.... parseCharIf _eIsQuot.... makePrimitive.

' S => M (P S EXPR)
execLit = parseOption parseOption execToken. execNum.. execString.

' S => EXPR => EXPR
execTransform = B Y. B B S S B IF. C B isEQ. B fst. I... 1... B makeApplication makePrimitive K... I..... B C B S. B S B IF. C B isEQ. B fst. I... 2.... S B S. B B makeApplication.. B B makeApplication makePrimitive S.... C B B. I.. B fst. B snd. I....... C B B. I.. B snd. B snd. I........ C B S. C B C. B B IF.. C B B. B strEquals. I... B snd. I..... makePrimitive I.... B makeApplication makePrimitive K... I.....
' EXPR => S => M (P S EXPR)
execExpression = Y S B C. B B parseOption.. B S B parseOption. C B execChar. I.. _eCharBrClose.... S B B. B parsePipe. B parseOption execLit.. B parseBindOverride execReadChar _eCharBrOpen... C I. makePrimitive I....... C B B. B B. I... C B B. B makeApplication. I... I....... B parseBindOverride execReadChar _eCharAbstr... B parsePipe execToken.. B Y. B K. C B B. B parseBindOperation. C I. makePrimitive I..... B execTransform. B snd. I.........
' S => M (P S EXPR)
execOpenExpression = execExpression makePrimitive I..
' S => M EXPR
exec = B parseAcceptFullyConsumed. B execOpenExpression. C B listCons. I.. ")"...
' S => M X
execReduce = C B maybeBind. B exec. I... reduce redBindInit..
' M MAPPING => S => M X
execReduceX = C B B. B maybeBind. I... C B B. B maybeBind. B exec. I.... B reduce. I...
' MAPPING => S => EXPR => MAPPING
addExprInternal = B C B C. B B S.. C B B. B C. B B IF.. C B B. B strEquals. I... I..... I..... C B B. I.. I..
' M MAPPING => S => EXPR => M MAPPING
addExpr = C B B. B B. B maybeMap. I.... C B B. B C. B C B addExprInternal. I... I.... I..
' M MAPPING => S => M MAPPING
execStatementInternal = C B B. B maybeBind. I... B S C B C. B S B IF. B maybeHasValue. I.... B B maybeReturn.. B C B S. S B C. B B IF.. B C B strEquals. I... B fst. B maybeGetValue. I...... B snd. B maybeGetValue. I...... C B B. I.. I...... maybeNothing... C B B. B maybeMap. B parseBindDiscard execToken. execReadChar _eCharAssign... I.... B S B makePair. B snd. B snd. I..... B C B maybeBind. B exec. B fst. I..... B reduce. I......
' M MAPPING => S => M MAPPING
execStatement = C B S. S B B. B C. B C B IF. B listIsEmpty. I.... I.... C B B. B execStatementInternal. I... I.... B strTrim. C B listTakeWhile. I.. B NOT. B isEQ _eCharComment.. I.....



